/**
 * @author  PT28/PT0141 
 * @desc    This module provides control par for automatic test execution
 * @see     [16410-1:2016]: Test suite structure and test purpose
 * @see     [16410-1:2016], Clause 5.3.2 for TC namimg conventions
 * @version $id$
 */
module ContextData_TE {
     
     // LibEfc_Common
    import from Common_Pixits all;
    
    // ContextData
    import from ContextData_TCs all;
    import from ContextData_PICS_FE all;
    import from ContextData_PICS_BE all;

    control {
        /**
         * @desc    TC_CH_FE_BV_01: Verify that DUT updates its Context Data
         * @remark  [17575-3:2016], Clause 8.3 Attributes and data sets
         */
        execute(TC_CH_FE_BV_01(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_01: Verify the presence of obeId data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_01(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_02: Verify the absence of obeId data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_02(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_03: Verify the presence of vehicleLPNr data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent 
         */
        execute(TC_CR_FE_BV_03(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_04: Verify the absence of vehicleLPNr data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent 
         */
        execute(TC_CR_FE_BV_04(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_05: Verify the presence of paymentMeans data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_05(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_06: Verify the absence of paymentMeans data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_06(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_07: Verify the presence of tollContext data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_07(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_08: Verify the absence of tollContext data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_08(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_09: Verify the presence of chargeReportFinalRecipient data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_09(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_10: Verify the absence of chargeReportFinalRecipient data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_10(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_11: Verify the presence of timeOfReport data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_11(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_12: Verify the absence of timeOfReport data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_12(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_13: Verify the presence of reportPeriod data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_13(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_14: Verify the absence of reportPeriod data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_14(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_15: Verify the presence of versionInfo data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_15(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_16: Verify the absence of versionInfo data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_16(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_17: Verify the presence of sumVatForThisSession data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.3.5.2.1 Data type ChargeReport
         */
        execute(TC_CR_FE_BV_17(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_18: Verify the absence of sumVatForThisSession data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.3.5.2.1 Data type ChargeReport
         */
        execute(TC_CR_FE_BV_18(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_19: Verify the presence of accountStatus data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.3.5.2.1 Data type ChargeReport
         */
        execute(TC_CR_FE_BV_19(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_20: Verify the absence of accountStatus data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.3.5.2.1 Data type ChargeReport
         */
        execute(TC_CR_FE_BV_20(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_21: Verify the presence of chargeReportCounter data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_21(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_22: Verify the absence of chargeReportCounter data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_22(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_23: Verify the presence of mileage data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_23(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_24: Verify the absence of mileage data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_24(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_25: Verify the presence of listOfCccAttributes data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_25(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_26: Verify the absence of listOfCccAttributes data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_26(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_27: Verify the usage of authenticated Usage Statement
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_27(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_28: Verify the usage of non-authenticated Usage Statement
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_28(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_29: Verify the presence of usageStatementId data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_29(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_30: Verify the absence of usageStatementId data element in Usage Statement
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_30(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_31: Verify the presence of tollContext data element in Charge Report
         * @see     A.2.1 BV test purposes
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_31(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_32: Verify the absence of tollContext data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_32(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_33: Verify the presence of chargeReportFinalRecipient data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_33(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_34: Verify the absence of chargeReportFinalRecipient data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_34(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_35: Verify the presence of aggregatedFee data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_35(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_36: Verify the absence of aggregatedFee data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_36(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_37: Verify the presence of sumVat data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_37(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_38: Verify the absence of sumVat data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_38(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_39: Verify the presence of aggregatedSingleTariffClassSession data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_39(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_40: Verify the absence of aggregatedSingleTariffClassSession data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.3.5.2.2 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_40(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_41: Verify the presence of listOfChargeObjects data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_41(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_42: Verify the absence of listOfChargeObjects data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_42(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_43: Verify the presence of listOfDSRCUsageData data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.3.5.2.2 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_43(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_44: Verify the absence of listOfDSRCUsageData data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.3.5.2.2 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_44(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_45: Verify the presence of listOfRawUsageData data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_45(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_46: Verify the absence of listOfRawUsageData data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_46(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_47: Verify the presence of noUsage data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_47(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_48: Verify the absence of noUsage data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_48(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_49: Verify the presence of additionalUsageInformation data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_49(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_50: Verify the absence of additionalUsageInformation data element in Charge Report
         * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
         */
        execute(TC_CR_FE_BV_50(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_51: Charge Report is sent separately upon the same precedenceLevel for overlapping Partitions
         * @remark  [17575-3:2016], Clause 8.5.2.3 Toll context partition overview
         */
        execute(TC_CR_FE_BV_51(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_52: Charge Report is sent once upon the different precedenceLevel for overlapping Partitions
         * @remark  [17575-3:2016], Clause 8.5.2.3 Toll context partition overview
         */
        execute(TC_CR_FE_BV_52(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_53: Front End sends a charge report entering the toll context partition
         * @remark  [17575-3:2016], Clause 8.5.2.3 Toll context partition overview
         */
        execute(TC_CR_FE_BV_53(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_54: Verify fee calculation algorithm - no rounding rules
         * @remark  [17575-3:2016], Clause 8.5.3.7 The fee calculation algorithm
         */
        execute(TC_CR_FE_BV_54(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_55: Verify fee calculation algorithm with rounding up rule for charge units
         * @remark  [17575-3:2016], Clause 8.5.3.7 The fee calculation algorithm
         */
        execute(TC_CR_FE_BV_55(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_56: Verify fee calculation algorithm with rounding down rule for charge units
         * @remark  [17575-3:2016], Clause 8.5.3.7 The fee calculation algorithm
         */
        execute(TC_CR_FE_BV_56(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_57: Verify fee calculation algorithm in alternative currency
         * @remark  [17575-3:2016], Clause 8.5.3.2.3 EFC attribute CurrencyConversionTable
         * @remark  [17575-3:2016], Clause 8.5.3.7 The fee calculation algorithm
         */
        execute(TC_CR_FE_BV_57(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_58: Verify the usage of authenticated Charge Report
         * @remark  [17575-3:2016], Clause Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_58(), PX_GUARD);
        /**
         * @desc    TC_CR_FE_BV_59: Verify the usage of non-authenticated Charge Report
         * @remark  [17575-3:2016], Clause Clause 8.5.5.3.2 Data type ChargeReportContent
         */
        execute(TC_CR_FE_BV_59(), PX_GUARD);
        if (ContextData_PICS_BE.PIC_authenticatedISO_3ADU == false) {
            /**
             * @desc    TC_PRO_BE_BV_01: Protocol version handling
             * @remark  [17575-3:2016], Clause 6.3.1 Protocol versioning
             */
            execute(TC_PRO_BE_BV_01(), PX_GUARD);
            /**
             * @desc    TC_PRO_BE_BV_02: Verify that Back End sends authenticated ISO17575-3Adu
             * @remark  [17575-3:2016], 7.2 Message authentication (data type Iso17575-3-InformationContent)
             */
            execute(TC_PRO_BE_BV_02(), PX_GUARD);
        }
        if (ContextData_PICS_BE.PIC_authenticatedISO_3ADU == true) {
            /**
             * @desc    TC_ADUH_BE_BV_01: Use of single tollContext per ADU
             * @remark  [17575-3:2016], Clause 7.5 Application data unit body (data type ISO 17575-3AduBody)
             * @remark  [17575-3:2016], Clause 8.2 Rules with respect to support of context data
             * @remark  [17575-3:2016], Clause 8.5.2.2 Toll context overview
             */
            execute(TC_ADUH_BE_BV_01(), PX_GUARD);
            /**
             * @desc    TC_ADUH_BE_BV_02: Verify handling of aduSequenceNumber
             * @remark  [17575-3:2016], Clause 7.4 Application data unit header (data type ISO 17575-3AduHeader)
             */
            execute(TC_ADUH_BE_BV_02(), PX_GUARD);
        }
        /**
         * @desc    TC_ADUH_BE_BV_02: Verify handling of aduSequenceNumber
         * @remark  [17575-3:2016], Clause 7.4 Application data unit header (data type ISO 17575-3AduHeader)
         */
        execute(TC_ADUH_BE_BV_02(), PX_GUARD);
        /**
         * @desc    TC_ADUB_BE_BV_01: Verify that each toll context shall be described using one or more EFC attributes
         * @remark  [17575-3:2016], Clause 8.3 Attributes and data sets
         */
        execute(TC_ADUB_BE_BV_01(), PX_GUARD);
        /**
         * @desc    TC_TC_BE_BV_01: Uniqueness of partition IDs within the Context Data
         * @remark  [17575-3:2016], Clause 8.5.2.2 Toll context overview
         * @see     [17575-3:2016], Table 3 — EFC attribute TollContextOverview (informative)
         */
        execute(TC_TC_BE_BV_01(), PX_GUARD);
        /**
         * @desc    TC_TC_BE_BV_02: Verify the presence of at least one partition within the Context Data (presence of partitionID)
         * @remark  [17575-3:2016], Clause 8.5.2.2 Toll context overview
         * @see     [17575-3:2016], Table 3 — EFC attribute TollContextOverview (informative)
         */
        execute(TC_TC_BE_BV_02(), PX_GUARD);
        /**
         * @desc    TC_TC_BE_BV_03: Verify that polygon points are defined in a way that the connections between the points do not intersect.
         * @remark  [17575-3:2016], Clause 8.5.2.2 Toll context overview
         * @see     [17575-3:2016], Table 3 — EFC attribute TollContextOverview (informative)
         */
        execute(TC_TC_BE_BV_03(), PX_GUARD);
        if (ContextData_PICS_BE.PIC_tariffTable == true) {
            /**
             * @desc    TC_TT_BE_BV_02: Verify that type of Charge Unit is compliant to Toll Context Partition Type
             * @remark  [17575-3:2016], Clause 8.5.3.2.2. EFC attribute TariffTable
             * @see     [17575-3:2016], Table 6 — Data type Tariff (informative)
             */
            execute(TC_TT_BE_BV_02(), PX_GUARD);
            /**
             * @desc    TC_TT_BE_BV_03: Verify that Tariff Class is unique within one toll context
             * @remark  [17575-3:2016], Clause 8.5.3.2.2 Data type Tariff
             * @see     [17575-3:2016], Table 6 — Data type Tariff (informative)
             */
            execute(TC_TT_BE_BV_03(), PX_GUARD);
            /**
             * @desc    TC_TT_BE_BV_04: Verify presence of Currency Conversion Table when alternative currency is valid for a tariff class
             * @remark  [17575-3:2016], Clause Clause 8.5.3.2.3 EFC attribute CurrencyConversionTable
             * @see     [17575-3:2016], Table 7 — EFC attribute CurrencyConversionTable (informative)
             */
            execute(TC_TT_BE_BV_04(), PX_GUARD);
        }
        if(ContextData_PICS_BE.PIC_tariffClassDefinition) {
            /**
             * @desc    TC_TACD_BE_BV_01: Verify that each combination of vehicle, time, location and user class leads to one and only one Tariff Class
             * @remark  [17575-3:2016], Clause 8.5.3.3.1 General principle
             * @see     [17575-3:2016], Table 9 — Data type TariffClass (informative), Figure 6 — Principle of creation of tariff classes
             */
            execute(TC_TACD_BE_BV_01(), PX_GUARD);
            /**
             * @desc    TC_TACD_BE_BV_02: Verify that Tariff Class ID is unique within one toll context within TariffClassDefinition attribute
             * @remark  [17575-3:2016], Clause 8.5.3.3.1 General principle
             * @see     [17575-3:2016], Table 9 — Data type TariffClass (informative), Figure 6 — Principle of creation of tariff classes
             */
            execute(TC_TACD_BE_BV_02(), PX_GUARD);
        }
        if (ContextData_PICS_BE.PIC_localVehicleClassDefinition == true) {
            /**
             * @desc    TC_LVCD_BE_BV_01: Verify that Local Vehicle Class Id is unique
             * @remark  [17575-3:2016], Clause 8.5.3.4.2 Data type LocalVehicleClass
             * @see     [17575-3:2016], Table 11 — Data type LocalVehicleClass (informative)
             */
            execute(TC_LVCD_BE_BV_01(), PX_GUARD);
            /**
             * @desc    TC_LVCD_BE_BV_02: Verify that Priority Value is different for overlapping Vehicle Classes
             * @remark  [17575-3:2016], Clause 8.5.3.4.2 Data type LocalVehicleClass
             * @see     [17575-3:2016], Table 11 — Data type LocalVehicleClass (informative)
             * EXAMPLE 4    Vehicle class 45 is defined as all trucks having an overall length of 6,50 m to 12,50 m. Priority level for this class is set to 8. Vehicle class 46 is defined as all trucks having an overall length of 8,00 m to 15,00 m. Priority level for this class is set to 5. In case a vehicle would fall into both classes as it has a length of 10,65 m it has to be grouped into vehicle class 45 as the priority level of class 45 is higher
             */
            execute(TC_LVCD_BE_BV_02(), PX_GUARD);
        }
        if (ContextData_PICS_BE.PIC_timeClassDefinition == true) {
            /**
             * @desc    TC_TICD_BE_BV_01: Verify that Time Class Id is unique
             * @remark  [17575-3:2016], 8.5.3.5.2 Date type TimeClass
             * @see     [17575-3:2016], Table 13 — Data type TimeClass (informative)
             */
            execute(TC_TICD_BE_BV_01(), PX_GUARD);
            /**
             * @desc    TC_TICD_BE_BV_02: Verify that Priority Value is different for overlapping Time Classes
             * @remark  [17575-3:2016], 8.5.3.5.2 Date type TimeClass
             * @see     [17575-3:2016], Table 13 — Data type TimeClass (informative)
             */
            execute(TC_TICD_BE_BV_02(), PX_GUARD);
        }
        if (ContextData_PICS_BE.PIC_userClassDefinition == true) {
            /**
             * @desc    TC_USCD_BE_BV_01: Verify that User Class Id is unique
             * @remark  [17575-3:2016], Clause 8.5.3.6.2 Data type UserClass
             * @see     [17575-3:2016], Table 15 — Data type UserClass (informative)
             */
            execute(TC_USCD_BE_BV_01(), PX_GUARD);
            /**
             * @desc    TC_USCD_BE_BV_02: Verify that Priority Value is different for overlapping User Classes
             * @remark  [17575-3:2016], Clause 8.5.3.6.2 Data type UserClass
             * @see     [17575-3:2016], Table 15 — Data type UserClass (informative)
             */
            execute(TC_USCD_BE_BV_02(), PX_GUARD);
        }
        if (ContextData_PICS_BE.PIC__0tollContextLayout == true) {
            if (ContextData_PICS_BE.PIC_roadSectionPricing == true) {
                /**
                 * @desc    TC_TCL_BE_BV_01: Verify that Layout Description is compliant to Toll Context Partition Type
                 * @remark  [17575-3:2016], Clause 8.5.4 Requirements with regards to context layout
                 * @see     [17575-3:2016], Table 16 — Data type TollContextPartitionLayout (informative)
                 */
                execute(TC_TCL_BE_BV_01(), PX_GUARD);
                /**
                 * @desc    TC_TCL_BE_BV_02: Verify that one toll context shall have one or more toll context partition layout descriptions, one per defined toll context partition
                 * @remark  [17575-3:2016], Clause 8.5.4.1 General rules
                 * @see     [17575-3:2016], Table 16 — Data type TollContextPartitionLayout (informative)
                 */
                execute(TC_TCL_BE_BV_02(), PX_GUARD);
                /**
                 * @desc    TP_TCL_S_BE_BV_01: Verify that Charge Object Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.2 Requirements for section based layout
                 * @see     [17575-3:2016], Table 17 — Data type SectionLayout (informative)
                 */
                execute(TP_TCL_S_BE_BV_01(), PX_GUARD);
                /**
                 * @desc    TP_TCL_S_BE_BV_02: Verify that Point Identifier is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.2 Requirements for section based layout
                 * @see     [17575-3:2016], Table 17 — Data type SectionLayout (informative)
                 */
                execute(TP_TCL_S_BE_BV_02(), PX_GUARD);
                /**
                 * @desc    TP_TCL_S_BE_BV_03: Verify the Link Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.2.3 Data type Link
                 */
                execute(TP_TCL_S_BE_BV_03(), PX_GUARD);
                /**
                 * @desc    TP_TCL_S_BE_BV_06: Verify that Point identified by Point Identifier in Link has been defined in Network Points
                 * @remark  [17575-3:2016], Clause 8.5.4.2.3 Data type Link
                 */
                execute(TP_TCL_S_BE_BV_06(), PX_GUARD);
                /**
                 * @desc    TP_TCL_S_BE_BV_08: Verify that Point identified by Point Identifier in Liability Rules has been defined in Network Points
                 * @remark  [17575-3:2016], Clause 8.5.4.2.4 Data type LiabilityRules
                 * @see     [17575-3:2016], Table 18 — Use of the data elements in data type LiabilityRules
                 */
                execute(TP_TCL_S_BE_BV_08(), PX_GUARD);
                /**
                 * @desc    TP_TCL_S_BE_BV_10: Verify that Point identified by Point Identifier in Supporting Information has been defined in Network Points
                 * @remark  [17575-3:2016], Clause 8.5.4.2.5 Data type SupportingPoints
                 */
                execute(TP_TCL_S_BE_BV_10(), PX_GUARD);
                /**
                 * @desc    TP_TCL_S_BE_BV_11: Verify that Applicable Time Classes for Section Layout are present in Time Class Definition
                 * @remark  [17575-3:2016], Clause 8.5.4.2.2 Data element sectionLayout/Data type SectionLayout
                 * @see     [17575-3:2016], Table 17 — Data type SectionLayout (informative)
                 */
                execute(TP_TCL_S_BE_BV_11(), PX_GUARD);
            }
            if (((ContextData_PICS_BE.PIC_areaPricingDistance == true) or (ContextData_PICS_BE.PIC_areaPricingTime == true)) and (ContextData_PICS_BE.PIC_areaPricingLayout)) {
                /**
                 * @desc    TC_TCL_A_BE_BV_01: Verify that Area Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                execute(TC_TCL_A_BE_BV_01(), PX_GUARD);
                /**
                 * @desc    TC_TCL_A_BE_BV_02: Verify that Charge Object Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                execute(TC_TCL_A_BE_BV_02(), PX_GUARD);
                /**
                 * @desc    TC_TCL_A_BE_BV_03: Verify that Point Identifier is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                execute(TC_TCL_A_BE_BV_03(), PX_GUARD);
                /**
                 * @desc    TC_TCL_A_BE_BV_04: Verify that Link Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                execute(TC_TCL_A_BE_BV_04(), PX_GUARD);
                /**
                 * @desc    TC_TCL_A_BE_BV_06: Verify that Point is identified by Point Identifier within Link
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                execute(TC_TCL_A_BE_BV_06(), PX_GUARD);
                /**
                 * @desc    TC_TCL_A_BE_BV_08: Verify that Point identified by Point Identifier in Supporting Information has been defined in Network Points
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                execute(TC_TCL_A_BE_BV_08(), PX_GUARD);
            }
            if ((ContextData_PICS_BE.PIC_cordonPricing == true) and (ContextData_PICS_BE.PIC_cordonPricingLayout)) {
                /**
                 * @desc    TC_TCL_C_BE_BV_01: Verify that Cordon Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.4.1 Data element cordonLayout
                 * @see     [17575-3:2016], Table 20 — Data type CordonLayout (informative)
                 */
                execute(TC_TCL_C_BE_BV_01(), PX_GUARD);
                /**
                 * @desc    TC_TCL_C_BE_BV_02: Verify that Applicable Time Classes for Cordon Layout are present in Time Class Definition (Cordon Entry Locations)
                 * @remark  [17575-3:2016], Clause 8.5.4.4.2 Data type CordonBorderPolygon
                 */
                execute(TC_TCL_C_BE_BV_02(), PX_GUARD);
                /**
                 * @desc    TC_TCL_C_BE_BV_03: Verify that Applicable Time Classes for Cordon Layout are present in Time Class Definition (Cordon Exit Locations)
                 * @remark  [17575-3:2016], Clause 8.5.4.4.2 Data type CordonBorderPolygon
                 */
                execute(TC_TCL_C_BE_BV_03(), PX_GUARD);
                /**
                 * @desc    TC_TCL_C_BE_BV_04: Verify the Cordon Segment Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.4.2 Data type CordonBorderPolygon
                 */
                execute(TC_TCL_C_BE_BV_04(), PX_GUARD);
            }
        }
    } // End of 'control' statement
} // End of module ContextData_TE