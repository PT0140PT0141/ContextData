/**
 * @author  PT28/PT0141 
 * @desc    This module provides test cases based on Charging TPs
 * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose
 * @see     Electronic fee collection (EFC) — Evaluation of equipment for conformity to CEN ISO/TS 17575-3 — Part 1: Test suite structure and test purpose
 * @remark  See clause 5.3.2 for TC namimg conventions
 * @version $id$
 */
module ContextData_TCs {
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 1: Charging
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 3: Context data
     * @see     A.2 Data specifications
     */
    import from EfcAutonomousContextData language "ASN.1:1997" all;
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 4: Roaming
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcDsrcApplication language "ASN.1:1997"all;
    import from Common_Parameterised_Asn1_Data all;
    import from Common_Interfaces all;
    import from Common_Templates all;
    import from Common_Functions all;
    import from Common_Pics all;
    import from Common_Pixits all;
    import from ContextData_Functions all;
    /**
     * @desc    Common templates
     */
    import from ContextData_TypesAndValues all;
    /**
     * @desc    Templates specific to ContextData TCs
     */
    import from ContextData_Templates all;
    import from ContextData_Pixits all;
    
    /**
     * @desc    These Test Purposes apply to:
     * - Iso17575-3Adu as claimed in [TS 17575-3] clause B.5.4.1/1,
     * - AttributeList as claimed in [TS 17575-3] clause B.5.4.1/3, 
     * - EFC Attributes as claimed in [TS 17575-3] clause B.5.4.3/1-9
     * @remark  5 TCs
     */
    group Context_Handling {
        
        /**
         * @desc    Group of the TCs based on TPs described in clause A.2.1 BV test purposes: Verify the usage of communication services
         * Test subgroup objective:
         * - to test the behaviour of the DUT in relation to the context activation;
         * - to test the behaviour of the DUT in relation to handling of multiple contexts;
         * - to test usage of communication services by DUT,
         * by means of the syntactically and contextual correct ADUs:
         * - single ADU consisting of all necessary attributes to activate the context, and/or
         * - several consecutive ADUs consisting of all necessary attributes to activate the context.
         */
        group Valid_Behaviour { // TODO Remove commented TCs
            
//            /**
//             * @desc    TC_CH_FE_BV_01: Verify that DUT activates toll context – toll charger attribute check
//             * @remark  [TS 17575-3], Clause 8.2 Rules with respect to support of context data
//             */
//            testcase TC_CH_FE_BV_01() runs on EutComp system TestAdapter {
//                var boolean v_result;
//                var ChargeReport v_chargeReport;
//                
//                // Preamble
//                f_ContextData_Preambule();
//                // Front End is initialized and can accept Context Data - Assume it's true
//                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
//                // Version of any data element of context data is known for the Front End - Assume it's true
//                // No authentication is required by the Front End
//                // Preamble done
//    
//                // Test body start
//                // Step1: Send ContextData1
//                f_pco_send_Iso17575_3Adu(
//                    m_Iso17575_3Adu(
//                        m_aduHeader, 
//                        m_ContextData1(
//                            valueof(m_aduHeader.contextId)
//                )));
//                // Step2: Event defined in ContextData1 occurred
//                f_userActions(cmdTrigger, raiseContext1Event);
//                // Step3: Wait for ChargeReport message
//                t_ac.start;
//                alt { // Step3: Check if tollCharger in ChargeReport equals to tollContextOverview.tollCharger in ContextData1
//                    [] a_pco_recv_Iso17575_3Adu(
//                        mw_chargeReport_tollCharger(
//                            valueof(
//                                m_ContextData1(
//                                    valueof(m_aduHeader.contextId)).tollContextOverview.tollCharger
//                        )),
//                        v_chargeReport,
//                        v_result
//                    ) {
//                        // Stop timer
//                        t_ac.stop;
//                        // Step4: Set verdict pass
//                        if (v_result == true) {
//                            setverdict(pass);
//                        } else {
//                            setverdict(fail);
//                        }
//                    }
////                    [] pco.receive(
////                        mw_chargeReport_tollCharger(
////                            valueof(
////                                m_ContextData1(
////                                    valueof(m_aduHeader.contextId)).tollContextOverview.tollCharger
////                    ))) {
////                        // Stop timer
////                        t_ac.stop;
////                        // Step4: Set verdict pass
////                        setverdict(pass);
////                    } // pco.receive(mw_chargeReport_tollCharger
//                } // End of 'alt' statement
//                // Test body done
//    
//                // Postamble
//                f_ContextData_Postambule();
//            } // End of TC TC_CH_FE_BV_01
//
//            /**
//             * @desc    TC_CH_FE_BV_03: Verify that DUT activates toll context (sent in many ADUs) – toll charger attribute check
//             * @remark  [TS 17575-3], Clause 8.2 Rules with respect to support of context data
//             */
//            testcase TC_CH_FE_BV_03() runs on EutComp system TestAdapter 
//            {
//                // Preamble
//                f_ContextData_Preambule();
//                // Front End is initialized and can accept Context Data - Assume it's true
//                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
//                // Version of any data element of context data is known for the Front End - Assume it's true
//                // No authentication is required by the Front End
//                // Preamble done
//    
//                // Test body start
//                // Step1: Send ContextData2
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData2(valueof(m_aduHeader_Table9.contextId), valueof(m_aduHeader.tollCharger))));
//                // Step2: Send ContextData3
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData3(valueof(m_aduHeader_Table9.contextId))));
//                // Step3: Send ContextData4
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData4(valueof(m_aduHeader_Table9.contextId))));
//                // Step4: Send ContextData5
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData5(valueof(m_aduHeader_Table9.contextId))));
//                // Step5: Send ContextData6
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData6(valueof(m_aduHeader_Table9.contextId))));
//                // Step6: Send ContextData7
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData7(valueof(m_aduHeader_Table9.contextId))));
//                // Step7: Send ContextData8
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData8(valueof(m_aduHeader_Table9.contextId))));
//                // Step8: Send ContextData9
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData9(valueof(m_aduHeader_Table9.contextId))));
//                // Step9: Send ContextData10
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData10(valueof(m_aduHeader_Table9.contextId))));
//                // Step 10: Event defined in ContextData9 occurred
//                f_userActions(cmdTrigger, raiseContext9Event);
//                // Step11: Wait for ChargeReport message
//                t_ac.start;
//                alt { // Step12: Check if tollCharger in ChargeReport equals to tollContextOverview.tollCharger in ContextData2
//                    [] pco.receive(mw_chargeReport_tollCharger(valueof(m_ContextData2(valueof(m_aduHeader_Table9.contextId), valueof(m_aduHeader.tollCharger)).tollContextOverview.tollCharger))) {
//                        // Stop timer
//                        t_ac.stop;
//                        // Step12 : pass
//                        setverdict(pass);
//                    } // pco.receive(mw_chargeReport_tollCharger
//                } // End of 'alt' statement
//                // Test body done
//    
//                // Postamble
//                f_ContextData_Postambule();
//            } // End of TC TC_CH_FE_BV_03
//
//            /**
//             * @desc    TC_CH_FE_BV_06: Verify that DUT handles contexts of different Toll Chargers
//             * @remark  [TS 17575-3], Clause 8.1 Rules with respect to support of context data
//             */
//            testcase TC_CH_FE_BV_06() runs on EutComp system TestAdapter 
//            {
//                var ChargeReport v_chargeReport := null;
//
//                // Preamble
//                f_ContextData_Preambule();
//                // Front End is initialized and can accept Context Data - Assume it's true
//                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
//                // Version of any data element of context data is known for the Front End - Assume it's true
//                // No authentication is required by the Front End
//                // Preamble done
//    
//                // Test body start
//                // Step1: Send ContextData1
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData1(valueof(m_aduHeader.contextId))));
//                // Step2: Send ContextData12
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_ContextData12, m_ContextData12(valueof(m_aduHeader_ContextData12.contextId))));
//                // Step3: At least one UsageStatement for ContextData1 can be reported by Front End and Event defined in ContextData1 occurred
//                f_userActions(cmdTrigger, raiseContext1Event);
//                // Step4: Wait for ChargeReport message
//                t_ac.start;
//                alt {
//                    [] pco.receive(mw_chargeReport_any) -> value v_chargeReport {
//                        // Stop timer
//                        t_ac.stop;
//                        // Step5: Check if tollCharger in ChargeReport NOT equal to tollContextOverview.tollCharger in ContextData1
//                        if (v_chargeReport.tollCharger == valueof(m_ContextData1(valueof(m_aduHeader.contextId)).tollContextOverview.tollCharger)) {
//                            // Step5: fail
//                            setverdict(fail);
//                         } else {
//                            // Step5: pass
//
//                            // Step6: Event defined in ContextData12 occurred
//                            f_userActions(cmdTrigger, raiseContext12Event);
//                            // Step7: Wait for ChargeReport message
//                            t_ac.start;
//                            alt {
//                                [] pco.receive(mw_chargeReport_any) -> value v_chargeReport {
//                                    // Stop timer
//                                    t_ac.stop;
//                                    // Step8: Check if tollCharger in ChargeReport NOT equal to tollContextOverview.tollCharger in ContextData12
//                                    if (v_chargeReport.tollCharger == valueof(m_ContextData12(valueof(m_aduHeader.contextId)).tollContextOverview.tollCharger)) {
//                                        // Step8: fail
//                                        setverdict(fail);
//                                     } else {
//                                        // Step8: pass
//                                        setverdict(pass);
//                                    } // End of 'if' statement
//                                } // pco.receive(mw_chargeReport_any)
//                            } // End of 'alt' statement
//                         } // End of 'if' statement
//                    } // pco.receive(mw_chargeReport_any)
//                } // End of 'alt' statement
//                // Test body done
//    
//                // Postamble
//                f_ContextData_Postambule();
//            } // End of TC TC_CH_FE_BV_06
//
            /**
             * @desc    TC_CH_FE_BV_01: Verify that DUT updates its Context Data
             * @remark  [TS 17575-3], Clause 8.2 Rules with respect to support of context data
             */
            testcase TC_CH_FE_BV_01() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData1(valueof(m_aduHeader.contextId))));
                // Step2: Send ContextData13
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_ContextData13, m_ContextData13(valueof(m_aduHeader_ContextData13.contextId))));
                // Step 3: Event defined in ContextData1 occurred
                f_userActions(cmdTrigger, raiseContext1Event);
                // Step4: Wait for ChargeReport message
                t_ac.start;
                alt { // Step5: Check IF (ChargeReport content according to ContextData13)
                    [] pco.receive(mw_chargeReport_ContextData13) {
                        // Stop timer
                        t_ac.stop;
                        // Step5: pass
                        setverdict(pass);
                    } // mw_chargeReport_ContextData13
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CH_FE_BV_01
            
//            /**
//             * @desc    TC_CH_FE_BV_08: Verify that DUT updates its Context Data
//             * @remark  [TS 17575-3], Clause 8.1 Rules with respect to support of context data
//             */
//            testcase TC_CH_FE_BV_08() runs on EutComp system TestAdapter 
//            {
//                // Preamble
//                f_ContextData_Preambule();
//                // Front End is initialized and can accept Context Data - Assume it's true
//                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
//                // Version of any data element of context data is known for the Front End - Assume it's true
//                // No authentication is required by the Front End
//                // Preamble done
//    
//                // Test body start
//                // Step1: Send ContextData1
//                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData1(valueof(m_aduHeader.contextId))));
//                // Step2: Event defined in ContextData1 occurred
//                f_userActions(cmdTrigger, raiseContext1Event);
//                // Step3: Wait for ChargeReport message
//                t_ac.start;
//                alt {
//                    [] pco.receive(mw_chargeReport_default) {
//                        // Stop timer
//                        t_ac.stop;
//                        // Step4: Set verdict pass
//                        f_userActions(cmdCheck, checkCommunicationSystem);
//                        setverdict(pass);
//                    } // mw_chargeReport_default
//                } // End of 'alt' statement
//                // Test body done
//    
//                // Postamble
//                f_ContextData_Postambule();
//            } // End of TC TC_CH_FE_BV_08
//
        } // End of group Valid_Behaviour
        
        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
        
    } // End of group Context_Handling
    
    /**
     * @desc    These Test Purposes apply to ChargeReportConfiguration as claimed in [TS 17575-3] clause B.5.4.3/9
     */
    group Charge_Report {
        
        /**
         * @desc    Test subgroup objective:
         * - to test the presence of particular data elements in Charge Report sent by DUT in relation to Charge Report Configuration;
         * - to test the absence of particular data elements in Charge Report sent by DUT in relation to Charge Report Configuration;
         * by means of the syntactically and contextual correct ADUs:
         * - single ADU consisting of all necessary attributes;
         * - several consecutive ADUs consisting of all necessary attributes to activate the context
         * @remark  39 TCs
         */
        group Valid_Behaviour {
            
            /**
             * @desc    TC_CR_FE_BV_01: Verify the presence of obeID data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_01() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_obeId(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if obeId is presnt
                    [] pco.receive(mw_chargeReport_obeId_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_01
            
            /**
             * @desc    TC_CR_FE_BV_02: Verify the absence of obeID data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_02() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_obeId(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if obeId is presnt
                    [] pco.receive(mw_chargeReport_obeId_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_02
            
            /**
             * @desc    TC_CR_FE_BV_03: Verify the presence of vehicleLPNr data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2 
             */
            testcase TC_CR_FE_BV_03() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_vehicleLPNr(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if vehicleLPNr is presnt
                    [] pco.receive(mw_chargeReport_vehicleLPNr_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_03
            
            /**
             * @desc    TC_CR_FE_BV_04: Verify the absence of vehicleLPNr data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2 
             */
            testcase TC_CR_FE_BV_04() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_vehicleLPNr(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if vehicleLPNr is presnt
                    [] pco.receive(mw_chargeReport_vehicleLPNr_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_04
            
            /**
             * @desc    TC_CR_FE_BV_05: Verify the presence of paymentMeans data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_05() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_vehicleLPNr(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if paymentMeans is presnt
                    [] pco.receive(mw_chargeReport_paymentMeans_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_05
            
            /**
             * @desc    TC_CR_FE_BV_06: Verify the absence of paymentMeans data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_06() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_vehicleLPNr(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if paymentMeans is presnt
                    [] pco.receive(mw_chargeReport_paymentMeans_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_06
            
            /**
             * @desc    TC_CR_FE_BV_07: Verify the presence of tollContext data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_07() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_tollContext(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if tollContext is presnt
                    [] pco.receive(mw_chargeReport_tollContext_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_07
            
            /**
             * @desc    TC_CR_FE_BV_08: Verify the absence of tollContext data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_08() runs on EutComp system TestAdapter 
            {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_tollContext(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if tollContext is presnt
                    [] pco.receive(mw_chargeReport_tollContext_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_08
            
            /**
             * @desc    TC_CR_FE_BV_09: Verify the presence of chargeReportFinalRecipient data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_09() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_chargeReportFinalRecipient(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportFinalRecipient is presnt
                    [] pco.receive(mw_chargeReport_chargeReportFinalRecipient_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_09
            
            /**
             * @desc    TC_CR_FE_BV_10: Verify the absence of chargeReportFinalRecipient data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_10() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_chargeReportFinalRecipient(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportFinalRecipient is presnt
                    [] pco.receive(mw_chargeReport_chargeReportFinalRecipient_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_10
            
            /**
             * @desc    TC_CR_FE_BV_11: Verify the presence of timeOfReport data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_11() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_timeOfReport(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if timeOfReport is presnt
                    [] pco.receive(mw_chargeReport_timeOfReport_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_11
            
            /**
             * @desc    TC_CR_FE_BV_12: Verify the absence of timeOfReport data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_12() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_timeOfReport(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if timeOfReport is presnt
                    [] pco.receive(mw_chargeReport_timeOfReport_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_12
            
            /**
             * @desc    TC_CR_FE_BV_13: Verify the presence of reportPeriod data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_13() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_reportPeriod(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if reportPeriod is presnt
                    [] pco.receive(mw_chargeReport_reportPeriod_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_13
            
            /**
             * @desc    TC_CR_FE_BV_14: Verify the absence of reportPeriod data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_14() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_reportPeriod(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if reportPeriod is presnt
                    [] pco.receive(mw_chargeReport_reportPeriod_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_14
            
            
            /**
             * @desc    TC_CR_FE_BV_15: Verify the presence of versionInfo data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_15() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_versionInfo(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if versionInfo is presnt
                    [] pco.receive(mw_chargeReport_versionInfo_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_15
            
            /**
             * @desc    TC_CR_FE_BV_16: Verify the absence of versionInfo data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_16() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_versionInfo(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if versionInfo is presnt
                    [] pco.receive(mw_chargeReport_versionInfo_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_16
            
            /**
             * @desc    TC_CR_FE_BV_17: Verify the presence of sumVatForThisSession data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.3.5.2.1 Data type ChargeReport
             */
            testcase TC_CR_FE_BV_17() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_sumVatForThisSession(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if sumVatForThisSession is presnt
                    [] pco.receive(mw_chargeReport_sumVatForThisSession_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_17
            
            /**
             * @desc    TC_CR_FE_BV_18: Verify the absence of sumVatForThisSession data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.3.5.2.1 Data type ChargeReport
             */
            testcase TC_CR_FE_BV_18() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_sumVatForThisSession(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if sumVatForThisSession is presnt
                    [] pco.receive(mw_chargeReport_sumVatForThisSession_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_18
            
            /**
             * @desc    TC_CR_FE_BV_19: Verify the presence of accountStatus data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.3.5.2.1 Data type ChargeReport
             */
            testcase TC_CR_FE_BV_19() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_accountStatus(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if accountStatus is presnt
                    [] pco.receive(mw_chargeReport_accountStatus_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_19

            /**
             * @desc    TC_CR_FE_BV_20: Verify the absence of accountStatus data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.3.5.2.1 Data type ChargeReport
             */
            testcase TC_CR_FE_BV_20() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_accountStatus(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if accountStatus is presnt
                    [] pco.receive(mw_chargeReport_accountStatus_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_20

            /**
             * @desc    TC_CR_FE_BV_21: Verify the presence of chargeReportCounter data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_21() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_chargeReportCounter(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportCounter is presnt
                    [] pco.receive(mw_chargeReport_chargeReportCounter_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_21

            /**
             * @desc    TC_CR_FE_BV_22: Verify the absence of chargeReportCounter data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_22() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_chargeReportCounter(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportCounter is presnt
                    [] pco.receive(mw_chargeReport_chargeReportCounter_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_22

            /**
             * @desc    TC_CR_FE_BV_23: Verify the presence of mileage data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_23() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_mileage(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if mileage is presnt
                    [] pco.receive(mw_chargeReport_mileage_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_23

            /**
             * @desc    TC_CR_FE_BV_24: Verify the absence of mileage data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_24() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_mileage(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if mileage is presnt
                    [] pco.receive(mw_chargeReport_mileage_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_24

            /**
             * @desc    TC_CR_FE_BV_25: Verify the presence of listOfCCCAttributes data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_25() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_listOfCCCAttributes(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfCCCAttributes is presnt
                    [] pco.receive(mw_chargeReport_listOfCCCAttributes_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_24

            /**
             * @desc    TC_CR_FE_BV_26: Verify the absence of listOfCCCAttributes data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_26() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_listOfCCCAttributes(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfCCCAttributes is presnt
                    [] pco.receive(mw_chargeReport_listOfCCCAttributes_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_26

            /**
             * @desc    TC_CR_FE_BV_27: Verify the usage of authenticated Usage Statement
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_27() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (not(PICS_SECURED_MODE == true)) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_useOfUsageStatementAuthentication(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if authenticated is presnt
                    [] pco.receive(mw_chargeReport_UsageStatement_AuthenticatedUsageStatement_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_27

            /**
             * @desc    TC_CR_FE_BV_28: Verify the usage of non-authenticated Usage Statement
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_28() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_useOfUsageStatementAuthentication(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if authenticated is presnt
                    [] pco.receive(mw_chargeReport_UsageStatement_AuthenticatedUsageStatement_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_28

            /**
             * @desc    TC_CR_FE_BV_29: Verify the presence of usageStatementId data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_29() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_useOfUsageStatementId(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if usageStatementId is presnt
                    [] pco.receive(mw_chargeReport_useOfUsageStatementId_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_29

            /**
             * @desc    TC_CR_FE_BV_30: Verify the absence of usageStatementId data element in Usage Statement
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_30() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_useOfUsageStatementId(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if usageStatementId is presnt
                    [] pco.receive(mw_chargeReport_useOfUsageStatementId_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_30

            /**
             * @desc    TC_CR_FE_BV_31: Verify the presence of tollContext data element in Charge Report
             * @see     A.2.1 BV test purposes
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_31() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_useOfTollContext(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if tollContext is presnt
                    [] pco.receive(mw_chargeReport_usageStatementTollContext_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_31

            /**
             * @desc    TC_CR_FE_BV_32: Verify the absence of tollContext data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_32() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_useOfTollContext(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if tollContext is presnt
                    [] pco.receive(mw_chargeReport_usageStatementTollContext_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_32
            
            /**
             * @desc    TC_CR_FE_BV_33: Verify the presence of chargeReportFinalRecipient data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_33() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_chargeReportFinalRecipient(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportFinalRecipient is presnt
                    [] pco.receive(mw_chargeReport_chargeReportFinalRecipient_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_33

            /**
             * @desc    TC_CR_FE_BV_34: Verify the absence of chargeReportFinalRecipient data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_34() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_chargeReportFinalRecipient(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportFinalRecipient is presnt
                    [] pco.receive(mw_chargeReport_chargeReportFinalRecipient_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_34

            /**
             * @desc    TC_CR_FE_BV_35: Verify the presence of aggregatedFee data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_35() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_aggregatedFee(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if aggregatedFee is presnt
                    [] pco.receive(mw_chargeReport_aggregatedFee_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_35

            /**
             * @desc    TC_CR_FE_BV_36: Verify the absence of aggregatedFee data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_36() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_aggregatedFee(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if aggregatedFee is presnt
                    [] pco.receive(mw_chargeReport_aggregatedFee_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_36

            /**
             * @desc    TC_CR_FE_BV_37: Verify the presence of sumVat data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_37() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_sumVat(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if sumVat is presnt
                    [] pco.receive(mw_chargeReport_sumVat_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_37

            /**
             * @desc    TC_CR_FE_BV_38: Verify the absence of sumVat data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_38() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_sumVat(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if sumVat is presnt
                    [] pco.receive(mw_chargeReport_sumVat_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_38

            /**
             * @desc    TC_CR_FE_BV_39: Verify the presence of aggregatedSingleTariffClassSession data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_39() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_aggregatedSingleTariffClassSession(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if aggregatedSingleTariffClassSession is presnt
                    [] pco.receive(mw_chargeReport_aggregatedSingleTariffClassSession_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_39

            /**
             * @desc    TC_CR_FE_BV_40: Verify the absence of aggregatedSingleTariffClassSession data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.3.5.2.2 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_40() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_aggregatedSingleTariffClassSession(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if aggregatedSingleTariffClassSession is presnt
                    [] pco.receive(mw_chargeReport_aggregatedSingleTariffClassSession_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_40

            /**
             * @desc    TC_CR_FE_BV_41: Verify the presence of listOfChargeObjects data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_41() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_listOfChargeObjects(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfChargeObjects is presnt
                    [] pco.receive(mw_chargeReport_listOfChargeObjects_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_41

            /**
             * @desc    TC_CR_FE_BV_42: Verify the absence of listOfChargeObjects data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_42() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_listOfChargeObjects(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfChargeObjects is presnt
                    [] pco.receive(mw_chargeReport_listOfChargeObjects_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_42

            /**
             * @desc    TC_CR_FE_BV_43: Verify the presence of listOfDSRCUsageData data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.3.5.2.2 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_43() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_listOfDSRCUsageData(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfDSRCUsageData is presnt
                    [] pco.receive(mw_chargeReport_listOfDSRCUsageData_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_43

            /**
             * @desc    TC_CR_FE_BV_44: Verify the absence of listOfDSRCUsageData data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.3.5.2.2 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_44() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_listOfDSRCUsageData(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfDSRCUsageData is presnt
                    [] pco.receive(mw_chargeReport_listOfDSRCUsageData_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_44

            /**
             * @desc    TC_CR_FE_BV_45: Verify the presence of listOfRawUsageData data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_45() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_listOfRawUsageData(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfRawUsageData is presnt
                    [] pco.receive(mw_chargeReport_listOfRawUsageData_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_45

            /**
             * @desc    TC_CR_FE_BV_46: Verify the absence of listOfRawUsageData data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_46() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_listOfRawUsageData(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfRawUsageData is presnt
                    [] pco.receive(mw_chargeReport_listOfRawUsageData_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_46

            /**
             * @desc    TC_CR_FE_BV_47: Verify the presence of noUsage data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_47() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_noUsage(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if noUsage is presnt
                    [] pco.receive(mw_chargeReport_noUsage_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_47

            /**
             * @desc    TC_CR_FE_BV_48: Verify the absence of noUsage data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_48() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_noUsage(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if noUsage is presnt
                    [] pco.receive(mw_chargeReport_noUsage_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_48

            /**
             * @desc    TC_CR_FE_BV_49: Verify the presence of additionalUsageInformation data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_49() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_additionalUsageInformation(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if additionalUsageInformation is presnt
                    [] pco.receive(mw_chargeReport_additionalUsageInformation_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_49

            /**
             * @desc    TC_CR_FE_BV_50: Verify the absence of additionalUsageInformation data element in Charge Report
             * @remark  [TS 17575-3], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_50() runs on EutComp system TestAdapter {
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader, m_ContextData_chargeReport(valueof(m_aduHeader.contextId), m_chargeReportConfiguration_additionalUsageInformation(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents  occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if additionalUsageInformation is presnt
                    [] pco.receive(mw_chargeReport_additionalUsageInformation_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_default
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_50

            /**
             * @desc    TC_CR_FE_BV_51: Charge Report is sent separately upon the same precedenceLevel for overlapping Partitions
             * @remark  [TS 17575-3], Clause 8.5.2.3 Toll context partition overview
             */
            testcase TC_CR_FE_BV_51() runs on EutComp system TestAdapter {
                var ChargeReport chargeReport := null; // Used to check usageStatementId (see mw_chargeReport_ContextData10 template limitation)
                var integer v_stateCounter := 0;
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData20 
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData20(PX_TOLLCONTEXTPARTITIONID)));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext20Partition1AndPartition2Event);
                // Step3/4/8: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] pco.receive(mw_chargeReport_ContextData20_1) -> value chargeReport { // Step 11
                        // Stop timer
                        t_ac.stop;
                        // Step5 : Verify that tollContext in Context Data message equals to tollContext in ChargeReport1 and ChargeReport2
                        if (match(chargeReport.usageStatementList, UsageStatement.usageStatementId:m_ContextData20.tollContextPartitionOverview[0].tollContextPartitionId) == false) { 
                            // Step6: fail
                            setverdict(fail);
                         } else {
                            v_stateCounter := v_stateCounter + 1;
                            t_ac.start;
                            repeat;
                        }
                    } 
                    [] pco.receive(mw_chargeReport_ContextData20_2) -> value chargeReport { // Step 11 
                        // Stop timer
                        t_ac.stop;
                        // Step6 : Verify that obeId is present only in one charge report (i.e. ChargeReport1 EXOR ChargeReport2)
                        if (match(chargeReport.usageStatementList, UsageStatement.usageStatementId:m_ContextData20.tollContextPartitionOverview[1].tollContextPartitionId ) == false) { 
                            // Step10: fail
                            setverdict(fail);
                        } else {
                           v_stateCounter := v_stateCounter + 1;
                           t_ac.start;
                           repeat;
                        }
                    }
                } // End of 'alt' statement
                if (v_stateCounter == 2) { // Step12
                    setverdict(pass);
                }
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_51

            /**
             * @desc    TC_CR_FE_BV_52: Charge Report is sent once upon the different precedenceLevel for overlapping Partitions
             * @remark  [TS 17575-3], Clause 8.5.2.3 Toll context partition overview
             */
            testcase TC_CR_FE_BV_52() runs on EutComp system TestAdapter {
                var ChargeReport chargeReport := null; // Used to check usageStatementId (see mw_chargeReport_ContextData10 template limitation)
                var integer v_stateCounter := 0;
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData21 
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData21(PX_TOLLCONTEXTPARTITIONID)));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext21Partition1AndPartition2Event);
                // Step3/4/8: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] pco.receive(mw_chargeReport_ContextData21_1) -> value chargeReport { // Step 11
                        // Stop timer
                        t_ac.stop;
                        // Step5 : Verify that tollContext in Context Data message equals to tollContext in ChargeReport1 and ChargeReport2
                        if (match(chargeReport.usageStatementList, UsageStatement.usageStatementId:m_ContextData20.tollContextPartitionOverview[0].tollContextPartitionId) == false) { 
                            // Step6: fail
                            setverdict(fail);
                         } else {
                            v_stateCounter := v_stateCounter + 1;
                            t_ac.start;
                            repeat;
                        }
                    } 
                    [] pco.receive(mw_chargeReport_ContextData21_2) -> value chargeReport { // Step 11 
                        // Stop timer
                        t_ac.stop;
                        // Step6 : Verify that obeId is present only in one charge report (i.e. ChargeReport1 EXOR ChargeReport2)
                        if (match(chargeReport.usageStatementList, UsageStatement.usageStatementId:m_ContextData20.tollContextPartitionOverview[1].tollContextPartitionId ) == false) { 
                            // Step10: fail
                            setverdict(fail);
                        } else {
                           v_stateCounter := v_stateCounter + 1;
                           t_ac.start;
                           repeat;
                        }
                    }
                } // End of 'alt' statement
                if (v_stateCounter == 2) { // Step12
                    setverdict(pass);
                }
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_52

            /**
             * @desc    TC_CR_FE_BV_53: Charge Report is sent once upon the different precedenceLevel for overlapping Partitions
             * @remark  [TS 17575-3], Clause 8.5.2.3 Toll context partition overview
             */
            testcase TC_CR_FE_BV_53() runs on EutComp system TestAdapter {
                var ChargeReport chargeReport := null; // Used to check usageStatementId (see mw_chargeReport_ContextData10 template limitation)
                var integer v_stateCounter := 0;
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData21 
                f_pco_send_Iso17575_3Adu(m_Iso17575_3Adu(m_aduHeader_Table9, m_ContextData21(PX_TOLLCONTEXTPARTITIONID)));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext21Partition1AndPartition2Event);
                // Step3/4/8: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] pco.receive(mw_chargeReport_ContextData21_1) -> value chargeReport { // Step 11
                        // Stop timer
                        t_ac.stop;
                        // Step5 : Verify that tollContext in Context Data message equals to tollContext in ChargeReport1 and ChargeReport2
                        if (match(chargeReport.usageStatementList, UsageStatement.usageStatementId:m_ContextData20.tollContextPartitionOverview[0].tollContextPartitionId) == false) { 
                            // Step6: fail
                            setverdict(fail);
                         } else {
                            v_stateCounter := v_stateCounter + 1;
                            t_ac.start;
                            repeat;
                        }
                    } 
                    [] pco.receive(mw_chargeReport_ContextData21_2) -> value chargeReport { // Step 11 
                        // Stop timer
                        t_ac.stop;
                        // Step6 : Verify that obeId is present only in one charge report (i.e. ChargeReport1 EXOR ChargeReport2)
                        if (match(chargeReport.usageStatementList, UsageStatement.usageStatementId:m_ContextData20.tollContextPartitionOverview[1].tollContextPartitionId ) == false) { 
                            // Step10: fail
                            setverdict(fail);
                        } else {
                           v_stateCounter := v_stateCounter + 1;
                           t_ac.start;
                           repeat;
                        }
                    }
                } // End of 'alt' statement
                if (v_stateCounter == 2) { // Step12
                    setverdict(pass);
                }
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_53

            /**
             * @desc    TC_CR_FE_BV_58: Verify the usage of authenticated Charge Report
             * @remark  [TS 17575-3], Clause Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_58() runs on EutComp system TestAdapter {
                
                // Local variables
                var boolean v_result;
                var ChargeReport v_chargeReport;
                
                // Test control
                if (not(PICS_SECURED_MODE)) {
                    log("*** " & testcasename() & ": PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1 in secured mode
                f_pco_send_Iso17575_3Adu(
                    m_Iso17575_3Adu(
                        m_aduHeader, 
                        m_ContextData1(
                            valueof(m_aduHeader.contextId)
                )));
                // Step2: Event defined in ContextData1 occurred
                f_userActions(cmdTrigger, raiseContext1Event);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step3: Check if tollCharger in ChargeReport equals to tollContextOverview.tollCharger in ContextData1
                    [] a_pco_recv_Iso17575_3Adu(
                        mw_chargeReport_tollContext(
                            valueof(
                                m_ContextData1(
                                    valueof(m_aduHeader.contextId)).tollContextOverview.tollContext
                        )),
                        v_chargeReport,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        if (v_result == true) {
                            setverdict(pass);
                        } else {
                            setverdict(fail);
                        }
                    }
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_58
            
            /**
             * @desc    TC_CR_FE_BV_59: Verify the usage of non-authenticated Charge Report
             * @remark  [TS 17575-3], Clause Clause 8.5.5.3.2
             */
            testcase TC_CR_FE_BV_59() runs on EutComp system TestAdapter {
                
                // Local variables
                var boolean v_result;
                var ChargeReport v_chargeReport;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_ContextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1 in non secured mode
                f_pco_send_Iso17575_3Adu(
                    m_Iso17575_3Adu(
                        m_aduHeader, 
                        m_ContextData1(
                            valueof(m_aduHeader.contextId)
                )));
                // Step2: Event defined in ContextData1 occurred
                f_userActions(cmdTrigger, raiseContext1Event);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step3: Check if tollCharger in ChargeReport equals to tollContextOverview.tollCharger in ContextData1
                    [] a_pco_recv_Iso17575_3Adu(
                        mw_chargeReport_tollContext(
                            valueof(
                                m_ContextData1(
                                    valueof(m_aduHeader.contextId)).tollContextOverview.tollContext
                        )),
                        v_chargeReport,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        if (v_result == true) {
                            setverdict(pass);
                        } else {
                            setverdict(fail);
                        }
                    }
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_CR_FE_BV_59
            
        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
        
    } // End of group Charge_Report

    /**
     * @desc    These Test Purposes apply to Communication services support as claimed in [TS 17575-3] clause B.6.4.2/1, and EFC Attributes as claimed in [TS 17575-3] clause B.6.4.3/1-9
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.2 Procedural test purposes
     */
    group Procedural {

        /**
         * @desc    Test subgroup objective:
         * - to test the usage of communication services
         * - to test the behaviour of the DUT in relation to handling versions
         * @remark  2 TCs
         */
        group Valid_Behaviour {

//            /**
//             * @desc    TC_PRO_BE_BV_01: Verify the usage of communication services
//             * @remark  [TS 17575-3], Clause 6.1 Communication services
//             */
//            testcase TC_PRO_BE_BV_01() runs on EutComp system TestAdapter 
//            {
//                // Preamble
//                f_ContextData_Preambule();
//                // Back End is initialized and can send Context Data
//                // Preamble done
//    
//                // Test body start
//                // Step1: Trigger one ISO17575-3ADU message
//                f_userActions(cmdTrigger, raiseADU);
//                // Step1: Wait for ISO17575-3ADU message
//                t_ac.start;
//                alt {
//                    [] pco.receive(mw_Iso17575_3Adu_default) {
//                        // Stop timer
//                        t_ac.stop;
//                        // Step2: Verify that communication services defined in [TS 17575-2] are used to transmit the ADU
//                        f_userActions(cmdCheck, checkCommunicationSystem);
//                        setverdict(pass);
//                    }
//                }
//                // Test body done
//    
//                // Postamble
//                f_ContextData_Postambule();
//            } // End of TC TC_PRO_BE_BV_01
//
            /**
             * @desc    TC_PRO_BE_BV_02: Verify version and validity handling
             * @remark  [TS 17575-3], Clause 6.2 Version and validity handling
             * @see     C.1.1 General Structure of Context Data
             */
            testcase TC_PRO_BE_BV_02() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu adu1 := null; // Used to retrieve data elements list
                var Iso17575_3Adu adu2 := null; // Used to retrieve data elements list
                var template Provider v_tollCharger := ?; // Used for tollCharger/contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/contextId matching uniqueness

                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step1: Trigger one ISO17575-3ADU message
                f_userActions(cmdTrigger, raiseADU);
                // Step1: Wait for ISO17575-3ADU message
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value adu1 { // Step2: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // Step3: Toll Regime properties changed. DUT needs to provision up-to-date context data
                        f_userActions(cmdInc, incTollRegime);
                        // Step4: Wait for the second ISO17575-3ADU message
                        t_ac.start;
                        alt {
                            [] pco.receive(mw_Iso17575_3Adu_TollCharger_ContextId(adu1.aduHeader.tollCharger, adu1.aduHeader.contextId)) -> value adu2 { // Step5: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                                // Stop timer
                                t_ac.stop;
                                // Step7: Compare the corresponding data elements in A1 and A2 consisting of Version information indicator (data type: VersionAndValidity)
                                if (f_compareDataElements(adu1.aduBody, adu2.aduBody) == false) {
                                    // Step7: fail
                                    setverdict(fail);
                                } else {
                                    // Step7: pass
                                    setverdict(pass);
                                }
                            }
                        }
                    }
                }
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_PRO_BE_BV_02
        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Procedural

    /**
     * @desc    These Test Purposes apply to  Iso17575-3Adu as claimed in [TS 17575-3] clause B.6.4.1/1
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.3 ADU Header test purposes
     * @remark  2 TCs
     */
    group ADU_Header {

        /**
         * @desc    Test subgroup objective:
         * - to test the uniqueness of Context ID within the Toll Charger;
         * - to test the behaviour of the DUT in relation to ADU Sequence Number
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_ADUH_BE_BV_01: Uniqueness of Context ID within the Toll Charger
             * @remark  [TS 17575-3], Clause 7.2 ADU header
             */
            testcase TC_ADUH_BE_BV_01() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu; // Used to retrieve contextId value
                var charstring v_uniquenessOfContextIDFound := ";"; // List of the Context ID already received
                var charstring v_contextId; // Current Context ID
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template charstring v_found_pattern; // Used by regexp to check the uniqueness of Context ID
                var template Provider tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId contextId := ?; // Used for tollCharger/v_contextId matching uniqueness

                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and has n Toll Contexts defined.
                // Back End sends Context Data for each Toll Context.
                // Preamble done

                // Test body start
                // Step N: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs);
                // StepN+1: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_TollCharger_ContextId(tollCharger, contextId)) -> value v_adu { // Step N+2: Verify structure of sent Iso17575-3Adus, taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Check for the uniqueness of Context ID within the Toll Charger
                        v_contextId := bit2str(v_adu.aduHeader.contextId.countryCode) & int2str(v_adu.aduHeader.contextId.providerIdentifier);
                        v_found_pattern := pattern "*({v_contextId})*";
                        if (regexp(v_uniquenessOfContextIDFound, v_found_pattern, 0) == v_contextId) {
                            setverdict(fail); // v_contextId exist at least 1 times, uniqueness is not verified
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        v_uniquenessOfContextIDFound := v_uniquenessOfContextIDFound & v_contextId & ";";
                        // Prepare for next message
                        t_ac.start;
                        tollCharger := v_adu.aduHeader.tollCharger;
                        contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                }
                // Test body done
    
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ADUH_BE_BV_01

            /**
             * @desc    TC_ADUH_BE_BV_02: Verify handling of aduSequenceNumber
             * @remark  [TS 17575-3], Clause 7.2 ADU header
             */
            testcase TC_ADUH_BE_BV_02() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu adu1 := null; // Used to retrieve aduSequenceNumber value #1
                var Iso17575_3Adu adu2 := null; // Used to retrieve aduSequenceNumber value #2
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step1: Trigger one ISO17575-3ADU message
                f_userActions(cmdTrigger, raiseADU);
                // Step1: Wait for ISO17575-3ADU message
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_default) -> value adu1 {
                        // Stop timer
                        t_ac.stop;
                        // Step2: Trigger ISO17575-3ADU send message
                        f_userActions(cmdTrigger, raiseADU);
                        // Step2: Wait for the second ISO17575-3ADU message
                        t_ac.start;
                        alt {
                            [] pco.receive(mw_Iso17575_3Adu_default) -> value adu2 {
                                // Stop timer
                                t_ac.stop;
                                // Step5: aduSequenceNumber2 == aduSequenceNumber1 + 1
                                if (adu2.aduHeader.aduSequenceNumber != (adu1.aduHeader.aduSequenceNumber + 1)) {
                                    // Step5: fail
                                    setverdict(fail);
                                } else {
                                    // Step5: pass
                                    setverdict(pass);
                                }
                            }
                        }
                    }
                }
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ADUH_BE_BV_02
        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group ADU_Header

    /**
     * @desc    These Test Purposes apply to EFCAttributes as claimed in [TS 17575-3] clause B.6.4.3/1-9
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  12 TCs
     */
    group ADU_Attribute {

        /**
         * @desc    Test subgroup objective:
         * - to test the availability of all mandatory attributes;
         */
        group Valid_Behaviour {

            /**
             * @desc    TC_ADUB_BE_BV_11: Verify the availability of Context Data attributes to allow the Front End to operate in a toll regime
             * @remark  [TS 17575-3], Clause 8.2 Attributes and data groups
             */
            testcase TC_ADUB_BE_BV_11() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve AttributeList data elements
                const integer c_attr_11 := 0; // TollContextOverview
                const integer c_attr_21 := 1; // TariffTable
                const integer c_attr_22 := 2; // TariffClassDefinition
                const integer c_attr_23 := 3; // LocalVehicleClassDefinition
                const integer c_attr_31 := 4; // TollContextLayout
                const integer c_attr_41 := 5; // ChargeReportingEvent
                const integer c_attr_42 := 6; // ChargeReportConfiguration
                var AttributeIdPresence attributeIdPresence := '00000000'B; // Bit array used to indicate the presence/absence of an attribute ID
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness

                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done

                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs);
                t_runningDuration.start;
                do {
                    // Step1: Wait for ISO17575-3ADU message
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollContextOverview_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // Step4
                            // Stop timer
                            t_ac.stop;
                            attributeIdPresence[c_attr_11] := '1'B;
                        }
                        [] pco.receive(mw_Iso17575_3Adu_tariffTable_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // Step6
                            // Stop timer
                            t_ac.stop;
                            attributeIdPresence[c_attr_21] := '1'B;
                        }
                        [] pco.receive(mw_Iso17575_3Adu_tariffClassDefinition_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // Step8
                            // Stop timer
                            t_ac.stop;
                            attributeIdPresence[c_attr_22] := '1'B;
                        }
                        [] pco.receive(mw_Iso17575_3Adu_localVehicleClassDefinition_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // Step10
                            // Stop timer
                            t_ac.stop;
                            attributeIdPresence[c_attr_23] := '1'B;
                        }
                        [] pco.receive(mw_Iso17575_3Adu_tollContextLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // Step12
                            // Stop timer
                            t_ac.stop;
                            attributeIdPresence[c_attr_31] := '1'B;
                        }
                        [] pco.receive(mw_Iso17575_3Adu_chargeReportingEvents_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // Step14
                            // Stop timer
                            t_ac.stop;
                            attributeIdPresence[c_attr_41] := '1'B;
                        }
                        [] pco.receive(mw_Iso17575_3Adu_chargeReportConfiguration_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // Step16
                            // Stop timer
                            t_ac.stop;
                            attributeIdPresence[c_attr_42] := '1'B;
                        }
                        [] pco.receive {
                            // Ingnore it, continue
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            // Step17: fail
                            setverdict(fail);
                        }
                    } // End of alt statement
                    v_tollCharger := v_adu.aduHeader.tollCharger;
                    v_contextId := v_adu.aduHeader.contextId;
                } while (attributeIdPresence != '01111111'B); // On expiration of t_guard timer (started in preambule), the TC will fail if all attributes are not received
                // Step17: pass
                setverdict(pass);
                // Test body done
                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ADUB_BE_BV_11

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group ADU_Attribute

    /**
     * @desc    These Test Purposes apply to TollContextOverview as claimed in [TS 17575-3] clause B.6.4.3/1 and OperationalStatus as claimed in [TS 17575-3] clause B.6.4.6
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  3 TCs
     */
    group Toll_Context_Overview {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Toll Context Overview attribute
         */
        group Valid_Behaviour {

            /**
             * @desc    TC_ATTR_11_BE_BV_02: Uniqueness of Toll Context within the Toll Charger
             * @remark  [TS 17575-3], Clause 8.3.2 Data group "Regime Overview"
             * @see     Table 3 – EFC attribute TollContextOverview
             */
            testcase TC_ATTR_11_BE_BV_02() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var charstring v_tollContextFound := ";"; // Used to build the list of the tollContext already processed
                var charstring v_tollContext; // tollContext currently processed
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template charstring m_found_pattern; // Used in regex to verify that 'tollContext' was not found before

                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and has n Toll Regimes defined
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Regime
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_tollContextOverview_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Check that number of instances of ‘TollContextOverview’ attribute equals to 1
                        // Here, we are sure there is at least one instance of ‘TollContextOverview’ attribute, check uniqueness now
                        v_tollContext := bit2str(v_adu.aduBody.tollContextOverview.tollContext.countryCode) & int2str(v_adu.aduBody.tollContextOverview.tollContext.providerIdentifier);
                        m_found_pattern := pattern "*({v_tollContext})*";
                        if (regexp(v_tollContextFound, m_found_pattern, 0) == v_tollContext) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from 'alt' statement
                        }
                        // tollContext non found, add current tollContext into the built list
                        v_tollContextFound := v_tollContextFound & v_tollContext & ";";

                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_11_BE_BV_02

            /**
             * @desc    TC_ATTR_11_BE_BV_03: Verify whether Stops Operation At is not earlier than Starts Operation At in Operational Status
             * @remark  [TS 17575-3], Clause 8.3.2 Data group "Context Overview"
             * @see     Table 3 – EFC attribute TollContextOverview
             */
            testcase TC_ATTR_11_BE_BV_03() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve operationalStatus field
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness

                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADU);
                // Step1: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_TollContextOverview_TollCharger_ContextID(v_tollCharger, v_contextId)) -> value v_adu { // Step2: Check that each attributeID of sectionList equals to 31
                        // Stop timer
                        t_ac.stop;
                        // Step1: TollCharger and ContextID data elements contained in ADU Header shall be the same as in the previous ADU
                        t_ac.start;
                        alt {
                            [] pco.receive(mw_Iso17575_3Adu_TollContextOverview_TollCharger_ContextID(v_adu.aduHeader.tollCharger, v_adu.aduHeader.contextId)) {
                                // Stop timer
                                t_ac.stop;
                                // Step4: A1.TollContextOverview.operationalStatus.startsOperationAt <= A1.TollContextOverview.operationalStatus.stopsOperationAt)
                                if (
                                    f_compareDateAndTime(
                                        v_adu.aduBody.tollContextOverview.operationalStatus.startsOperationAt,
                                        v_adu.aduBody.tollContextOverview.operationalStatus.stopsOperationAt
                                    ) == 1) {
                                    // Step4: fail
                                    setverdict(fail);
                                    t_runningDuration.stop;
                                    break;
                                }
                                t_ac.start; // Prepare for next message
                                v_tollCharger := v_adu.aduHeader.tollCharger;
                                v_contextId := v_adu.aduHeader.contextId;
                                repeat;
                            }
                            [] t_runningDuration.timeout {
                                // Step4: pass
                                setverdict(pass);
                            }
                        } // End of alt statement
                    }
                }
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_11_BE_BV_03

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Toll_Context_Overview

    /**
     * @desc    These Test Purposes apply to  TariffTable as claimed in [TS 17575-3] clause B.6.4.3/2, Toll Scheme Types as claimed in [TS 17575-3] clause B.6.4.5.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  3 TCs
     */
    group Tariff_Table {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Tariff Table attribute
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_ATTR_21_BE_BV_02: Verify that type of Charge Unit is compliant to Toll Scheme Type
             * @remark  [TS 17575-3], Clause 8.3.3.2.2. EFC attribute TariffTable
             * @see     Table 4 – EFC attribute TariffTable
             */
            testcase TC_ATTR_21_BE_BV_02() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_tariffClassDefinition_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TariffTable’ attribute, check uniqueness now
                        if (f_check_compliancy_ChargeUnit_TollSchemeType(
                            v_adu.aduBody.tollContextOverview, 
                            v_adu.aduBody.tariffTable
                        ) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_21_BE_BV_02

            /**
             * @desc    TC_ATTR_21_BE_BV_03: Verify that Tariff Class ID is unique within one toll context
             * @remark  [TS 17575-3], Clause 8.3.3.2.2. Data type Tariff
             * @see     Table 4 – EFC attribute TariffTable
             */
            testcase TC_ATTR_21_BE_BV_03() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_tariffTable_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TariffTable’ attribute, check uniqueness now
                        if (f_check_uniqueness_TariffClassID(v_adu.aduBody.tariffTable.tariffs) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_21_BE_BV_03

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Tariff_Table

    /**
     * @desc    These Test Purposes apply to  TariffClassDefinition as claimed in [TS 17575-3] clause B.6.4.3/3 and B.6.4.8.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  2 TCs
     */
    group Tariff_Class_Definition {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Tariff Class Defnition attribute
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_ATTR_22_BE_BV_01: Verify that each combination of vehicle, time, location and user class leads to one and only one Tariff Class
             * @remark  [TS 17575-3], Clause 8.3.3.3. Tariff class definition
             * @see     Table 7 – Data type TariffClass, Figure 9 — Principle of creation of tariff classes
             */
            testcase TC_ATTR_22_BE_BV_01() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_tariffClassDefinition_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Verify whether each combination of time, vehicle, location and user class leads to exactly one Tariff Class in A22.tariffClasses[i]
                        // Here, we are sure there is at least one instance of ‘TariffClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_TariffClasses(v_adu.aduBody.tariffClassDefinition.tariffClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_22_BE_BV_01

            /**
             * @desc    TC_ATTR_22_BE_BV_02: Verify that Tariff Class ID is unique within one toll context within TariffClassDefinition attribute
             * @remark  [TS 17575-3], Clause 8.3.3.3.2. Data type TariffClass
             * @see     Table 7 – Data type TariffClass, Figure 9 — Principle of creation of tariff classes
             */
            testcase TC_ATTR_22_BE_BV_02() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_tariffClassDefinition_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Verify uniqueness of tariclassid in A22.tariffClasses[i]
                        // Here, we are sure there is at least one instance of ‘TariffClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_TariffClassID_1(v_adu.aduBody.tariffClassDefinition.tariffClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_22_BE_BV_02

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Tariff_Class_Definition

    /**
     * @desc    These Test Purposes apply to  LocalVehicleClassDefinition as claimed in [TS 17575-3] clause B.6.4.3/4.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  2 TCs
     */
    group Local_Vehicle_Class_Definition {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Local Vehicle Class Definition attribute.
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_ATTR_23_BE_BV_01: Verify that Local Vehicle Class ID is unique
             * @remark  [TS 17575-3], Clause 8.3.3.4.1. Data type LocalVehicleClass
             * @see     Table 9 – Data type LocalVehicleClass
             */
            testcase TC_ATTR_23_BE_BV_01() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data. Local Vehicle Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_localVehicleClassDefinition_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘LocalVehicleClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_LocalVehicleClassId(v_adu.aduBody.localVehicleClassDefinition.localVehicleClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_23_BE_BV_01

            /**
             * @desc    TC_ATTR_23_BE_BV_02: Verify that Priority Level is different for overlapping Vehicle Classes
             * @remark  [TS 17575-3], Clause 8.3.3.4.1. Data type LocalVehicleClass
             * @see     Table 9 – Data type LocalVehicleClass
             * EXAMPLE 5    Vehicle class 45 is defined as all trucks having an overall length of 6,50 m to 12,50 m. Priority level for this class is set to 8. Vehicle class 46 is defined as all trucks having an overall length of 8,00 m to 15,00 m. Priority level for this class is set to 5. In case a vehicle would fall into both classes as it has a length of 10,65 m it has to be grouped into vehicle class 45 as the priority level of class 45 is higher
             */
            testcase TC_ATTR_23_BE_BV_02() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data. Local Vehicle Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_localVehicleClassDefinition_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘LocalVehicleClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_PriorityValue_by_group_LocalVehicleClass(v_adu.aduBody.localVehicleClassDefinition.localVehicleClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt clause
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_23_BE_BV_02

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Local_Vehicle_Class_Definition
    /**
     * @desc    These Test Purposes apply to  TimeClassDefinition as claimed in [TS 17575-3] clause B.6.4.3/5, and Priority Value as claimed in [TS 17575-3] clause B.6.4.12/1.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  2 TCs
     */
    group Time_Class_Definition {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Time Class Definition attribute.
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_ATTR_24_BE_BV_01: Verify that Time Class ID is unique
             * @remark  [TS 17575-3], Clause 8.3.3.5.1. Date type TimeClass
             * @see     Table 11 – Data type TimeClass
             */
            testcase TC_ATTR_24_BE_BV_01() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data. Time Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_timeclassdef_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TimeClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_TimeClassId(v_adu.aduBody.timeClassDefinition.timeClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_24_BE_BV_01

            /**
             * @desc    TC_ATTR_24_BE_BV_02: Verify that Priority Level is different for overlapping Time Classes
             * @remark  [TS 17575-3], 8.3.3.5.1. Date type TimeClass
             * @see     Table 9 – Data type LocalVehicleClass
             */
            testcase TC_ATTR_24_BE_BV_02() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data. Time Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_timeclassdef_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TimeClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_PriorityValue_by_group_TimeClass(v_adu.aduBody.timeClassDefinition.timeClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_24_BE_BV_02

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Time_Class_Definition
    /**
     * @desc    These Test Purposes apply to  UserClassDefinition as claimed in [TS 17575-3] clause B.6.4.3/6.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  2 TCs
     */
    group User_Class_Definition {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to User Class Definition attribute.
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_ATTR_25_BE_BV_01: Verify that User Class ID is unique
             * @remark  [TS 17575-3], Clause 8.3.3.6.1. Data type UserClass
             * @see     Table 13 – Data type UserClass
             */
            testcase TC_ATTR_25_BE_BV_01() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data. User Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_userclassdef_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Were, we are sure there is at least one instance of ‘UserClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_UserClassId(v_adu.aduBody.userClassDefinition.userClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_25_BE_BV_01

            /**
             * @desc    TC_ATTR_25_BE_BV_02: Verify that User Classes do not overlap
             * @remark  [TS 17575-3], Clause 8.3.3.6.1. Data type UserClass
             * @see     Table 13 – Data type UserClass
             */
            testcase TC_ATTR_25_BE_BV_02() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data. User Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_userclassdef_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘UserClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_PriorityValue_by_group_UserClass(v_adu.aduBody.userClassDefinition.userClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_25_BE_BV_02

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group User_Class_Definition
    /**
     * @desc    These Test Purposes apply to:
     * - TollContextLayout as claimed in [TS 17575-3] clause B.6.4.3/7;
     * - Layout Description Type as claimed in [TS 17575-3] B.6.4.17;
     * - Section Pricing Layout Description as claimed in [TS 17575-3] B.6.4.18 (ATTR-31S);
     * - Area Pricing Layout Description as claimed in [TS 17575-3] B.6.4.19 (ATTR-31A);
     * - Road Network object as claimed in [TS 17575-3] B.6.4.23 (ATTR-31A);
     * - Cordon Pricing Layout Description  as claimed in [TS 17575-3] B.6.4.24 (ATTR-31A);
     * - Cordon Entry Location Description  as claimed in [TS 17575-3] B.6.4.25 (ATTR-31A);
     * - Cordon Exit Location Description  as claimed in [TS 17575-3] B.6.4.26 (ATTR-31A).
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  32 TCs
     */
    group Toll_Context_Layout {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Toll Context Layout attribute for section layout description (ATTR-31S), Section List for section layout description (ATTR-31L), area layout description (ATTR-31A), and cordon  layout description (ATTR-31C).
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_ATTR_31_BE_BV_01: Verify that Layout Description is compliant to Toll Scheme Type
             * @remark  [TS 17575-3], Clause 8.3.4. Data group “Context Layout”
             * @see     Table 14 – EFC attribute TollContextLayout
             */
            testcase TC_ATTR_31_BE_BV_01() runs on EutComp system TestAdapter 
            {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                
                // Preamble
                f_ContextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] pco.receive(mw_Iso17575_3Adu_tollContextLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                        if (f_check_compliancy_TollContextLayout_TollSchemeType(
                            v_adu.aduBody.tollContextOverview, 
                            v_adu.aduBody.tollContextLayout
                        ) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollCharger := v_adu.aduHeader.tollCharger;
                        v_contextId := v_adu.aduHeader.contextId;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_ContextData_Postambule();
            } // End of TC TC_ATTR_31_BE_BV_01

            /**
             * @desc    Toll Context Layout test purposes for Section pricing scheme
             * @see     B.11.1.1. Toll Context Layout test purposes for Section pricing scheme
             */
            group Toll_Context_Layout_Section_Pricing {
                /**
                 * @desc    TC_ATTR_31S_BE_BV_01: Verify that Charge Object ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.1. Data element sectionLayout / Data type SectionLayout
                 * @see     Table 15 – Data type SectionLayout
                 */
                testcase TC_ATTR_31S_BE_BV_01() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_sectionPricingLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_SectionPricingLayout_chargeObjectId(v_adu.aduBody.tollContextLayout.layoutDescription.sectionPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31S_BE_BV_01
    
                /**
                 * @desc    TC_ATTR_31S_BE_BV_02: Verify that Point ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.1. Data element sectionLayout / Data type SectionLayout
                 * @see     Table 15 – Data type SectionLayout
                 */
                testcase TC_ATTR_31S_BE_BV_02() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_sectionPricingLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_SectionPricingLayout_pointId(v_adu.aduBody.tollContextLayout.layoutDescription.sectionPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31S_BE_BV_02
    
                /**
                 * @desc    TC_ATTR_31S_BE_BV_03: Verify that Link ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.1.1. Data type Link
                 * @see     Table 15 – Data type SectionLayout
                 */
                testcase TC_ATTR_31S_BE_BV_03() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_sectionPricingLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_SectionPricingLayout_linkId(v_adu.aduBody.tollContextLayout.layoutDescription.sectionPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31S_BE_BV_03
    
                /**
                 * @desc    TC_ATTR_31S_BE_BV_06: Verify that Point identified by Point ID in Link has been defined in Network Points
                 * @remark  [TS 17575-3], Clause 8.3.4.1.1. Data type Link
                 * @see     Table 15 – Data type SectionLayout
                 */
                testcase TC_ATTR_31S_BE_BV_06() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_sectionPricingLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_SectionPricingLayout_Link_pointID_networkPoints(v_adu.aduBody.tollContextLayout.layoutDescription.sectionPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31S_BE_BV_06
    
                /**
                 * @desc    TC_ATTR_31S_BE_BV_08: Verify that Point identified by Point ID in Liability Rules has been defined in Network Points
                 * @remark  [TS 17575-3], Clause 8.3.4.1.2. Data type LiabilityRules
                 * @see     Table 16 – Use of the data elements in data type LiabilityRules
                 */
                testcase TC_ATTR_31S_BE_BV_08() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_sectionPricingLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_SectionPricingLayout_LiabilityRules_pointID_networkPoints(v_adu.aduBody.tollContextLayout.layoutDescription.sectionPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31S_BE_BV_08
    
                /**
                 * @desc    TC_ATTR_31S_BE_BV_10: Verify that Point identified by Point ID in Supporting Information has been defined in Network Points
                 * @remark  [TS 17575-3], Clause 8.3.4.1.3. Data type SupportingPoints
                 */
                testcase TC_ATTR_31S_BE_BV_10() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_sectionPricingLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_SectionPricingLayout_SupportingPoint_pointID_networkPoints(v_adu.aduBody.tollContextLayout.layoutDescription.sectionPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done

                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31S_BE_BV_10
 
                /**
                 * @desc    TC_ATTR_31S_BE_BV_11: Verify that Applicable Time Classes for Section Layout are present in Time Class Definition
                 * @remark  [TS 17575-3], Clause 8.3.4.1. Data element sectionLayout / Data type SectionLayout
                 * @see     Table 15 – Data type SectionLayout
                 */
                testcase TC_ATTR_31S_BE_BV_11() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done

                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_sectionPricingLayout_TollCharger_ContextId(v_tollCharger, v_contextId)) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_SectionPricingLayout_timeClassId(v_adu.aduBody.tollContextLayout.layoutDescription.sectionPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done

                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31S_BE_BV_11

            } // End of group Toll_Context_Layout_Section_Pricing

            /**
             * @desc    Toll Context Layout test purposes for Area pricing scheme
             * @see     B.11.1.3. Toll Context Layout test purposes for Area pricing scheme
             */
            group Toll_Context_Layout_Area_Pricing {
                /**
                 * @desc    TC_ATTR_31A_BE_BV_01: Verify that Area ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.2. Data element areaLayout
                 * @see     Table 17 – Data type AreaLayout
                 */
                testcase TC_ATTR_31A_BE_BV_01() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_areaPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_AreaPricingLayout_areaId(v_adu.aduBody.tollContextLayout.layoutDescription.areaPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31A_BE_BV_01

                /**
                 * @desc    TC_ATTR_31A_BE_BV_02: Verify that Charge Object ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.2. Data element areaLayout
                 * @see     Table 17 – Data type AreaLayout
                 */
                testcase TC_ATTR_31A_BE_BV_02() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_areaPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s)
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_AreaPricingLayout_chargeObjectId(v_adu.aduBody.tollContextLayout.layoutDescription.areaPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31A_BE_BV_02

                /**
                 * @desc    TC_ATTR_31A_BE_BV_03: Verify that Point ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.2. Data element areaLayout
                 * @see     Table 17 – Data type AreaLayout
                 */
                testcase TC_ATTR_31A_BE_BV_03() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_areaPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_AreaPricingLayout_pointId(v_adu.aduBody.tollContextLayout.layoutDescription.areaPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31A_BE_BV_03

                /**
                 * @desc    TC_ATTR_31A_BE_BV_04: Verify that Link ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.2. Data element areaLayout
                 * @see     Table 17 – Data type AreaLayout
                 */
                testcase TC_ATTR_31A_BE_BV_04() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_areaPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_AreaPricingLayout_linkId(v_adu.aduBody.tollContextLayout.layoutDescription.areaPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done

                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31A_BE_BV_04

                /**
                 * @desc    TC_ATTR_31A_BE_BV_06: Verify that Point identified by Point ID in Link has been defined in Network Points
                 * @remark  [TS 17575-3], Clause 8.3.4.2. Data element areaLayout
                 * @see     Table 17 – Data type AreaLayout
                 */
                testcase TC_ATTR_31A_BE_BV_06() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_areaPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_AreaPricingLayout_Link_pointID_usedPoints(v_adu.aduBody.tollContextLayout.layoutDescription.areaPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31A_BE_BV_06

                /**
                 * @desc    TC_ATTR_31A_BE_BV_08: Verify that Point identified by Point ID in Supporting Information has been defined in Network Points
                 * @remark  [TS 17575-3], Clause 8.3.4.1.3. Data type SupportingPoints
                 */
                testcase TC_ATTR_31A_BE_BV_08() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_areaPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_AreaPricingLayout_SupportingPoint_pointID_networkPoints(v_adu.aduBody.tollContextLayout.layoutDescription.areaPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done

                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31A_BE_BV_08

            } // End of group Toll_Context_Layout_Area_Pricing

            /**
             * @desc    Toll Context Layout test purposes for Cordon pricing scheme
             * @see     B.11.1.4. Toll Context Layout test purposes for Cordon pricing scheme
             */
            group Toll_Context_Layout_Cordon_Pricing {
                /**
                 * @desc    TC_ATTR_31C_BE_BV_01: Verify that Cordon ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.3. Data element cordonLayout
                 * @see     Table 18 – Data type CordonLayout
                 */
                testcase TC_ATTR_31C_BE_BV_01() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Cordon pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_cordonPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_CordonPricingLayout_cordonId(v_adu.aduBody.tollContextLayout.layoutDescription.cordonPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31C_BE_BV_01

                /**
                 * @desc    TC_ATTR_31C_BE_BV_02: Verify that Applicable Time Classes for Cordon Layout are present in Time Class Definition (Cordon Entry Locations)
                 * @remark  [TS 17575-3], Clause 8.3.4.3.1. Data type CordonEntryLocation
                 */
                testcase TC_ATTR_31C_BE_BV_02() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    var TimeClassDefinition.timeClasses v_timeClasses := null;
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Cordon pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_cordonPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s)
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (ispresent(v_adu.aduBody.timeClassDefinition)) {
                                v_timeClasses := v_adu.aduBody.timeClassDefinition.timeClasses
                            }
                            if (f_check_uniqueness_TollContextLayout_CordonPricingLayout_CordonEntryLocation_applicableTimeClasses(v_adu.aduBody.tollContextLayout.layoutDescription.cordonPricingLayout, v_timeClasses) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31C_BE_BV_02

                /**
                 * @desc    TC_ATTR_31C_BE_BV_03: Verify that Applicable Time Classes for Cordon Layout are present in Time Class Definition (Cordon Exit Locations)
                 * @remark  [TS 17575-3], Clause 8.3.4.3.1. Data type CordonEntryLocation
                 */
                testcase TC_ATTR_31C_BE_BV_03() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    var TimeClassDefinition.timeClasses v_timeClasses := null;
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Cordon pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_cordonPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (ispresent(v_adu.aduBody.timeClassDefinition)) {
                                v_timeClasses := v_adu.aduBody.timeClassDefinition.timeClasses
                            }
                            if (f_check_uniqueness_TollContextLayout_CordonPricingLayout_CordonExitLocation_applicableTimeClasses(v_adu.aduBody.tollContextLayout.layoutDescription.cordonPricingLayout, v_timeClasses) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31C_BE_BV_03

                /**
                 * @desc    TC_ATTR_31C_BE_BV_04: Verify that Cordon Segment ID is unique
                 * @remark  [TS 17575-3], Clause 8.3.4.3.1. Data type CordonEntryLocation
                 */
                testcase TC_ATTR_31C_BE_BV_04() runs on EutComp system TestAdapter 
                {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template Provider v_tollCharger := ?; // Used for tollCharger/v_contextId matching uniqueness
                    var template ContextId v_contextId := ?; // Used for tollCharger/v_contextId matching uniqueness
                    
                    // Preamble
                    f_ContextData_Preambule();
                    // Back End is initialized and can send Context Data. Cordon pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_Iso17575_3Adu_tollcontextlayout_cordonPricingLayout) -> value v_adu { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_TollContextLayout_CordonPricingLayout_cordonSegmentId(v_adu.aduBody.tollContextLayout.layoutDescription.cordonPricingLayout) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollCharger := v_adu.aduHeader.tollCharger;
                            v_contextId := v_adu.aduHeader.contextId;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_ContextData_Postambule();
                } // End of TC TC_ATTR_31C_BE_BV_04

            } // End of group Toll_Context_Layout_Cordon_Pricing

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Toll_Context_Layout
} // End of module ContextData_TCs