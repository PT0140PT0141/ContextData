/**
 * @author  PT28/PT0141 
 * @desc    This module provides test cases based on Charging TPs
 * @see     [16410-1:2016]: Test suite structure and test purpose
 * @see     [16410-1:2016], Clause 5.3.2 for TC namimg conventions
 * @version $id$
 */
module ContextData_TCs {
    // EFC
    /**
     * @desc    [17575-1:2016]: Charging
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    /**
     * @desc    [17575-1:2016]: Context data
     * @see     A.2 Data specifications
     */
    import from EfcAutonomousContextData language "ASN.1:1997" all;
    import from EfcDsrcApplication language "ASN.1:1997"all;
     
     // LibEfc_Common
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parameterised_Asn1_Data TTCN-3 module is a workaround
     */
    import from Common_Parameterised_Asn1_Data all;
    import from Common_Interfaces all;
    import from Common_Templates all;
    import from Common_Functions all;
    import from Common_Pics all;
    import from Common_Pixits all;
    
    // ContextData
    import from ContextData_TypesAndValues all;
    import from ContextData_Functions all;
    import from ContextData_Templates all;
    import from ContextData_Pixits all;
    
    /**
     * @desc    These Test Purposes apply to:
     * - Iso17575-3Adu as claimed in [17575-3:2016], Clause B.4.3 Table B.6/1
     * - EFC Attributes as claimed in [17575-3:2016], Clause B.4.3 Table B.8
     * @remark  1 TCs
     */
    group Context_Handling {
        
        /**
         * @desc    Group of the TCs based on TPs described in clause A.2.1 BV test purposes: Verify the usage of communication services
         * Test subgroup objectives:
         * - To test the behaviour of the DUT in relation to the context activation
         * - To To test the behaviour of the DUT in relation to handling of multiple contexts
         * @see [16410-1:2016], Clause A.2  Context handling test purposes
         */
        group Valid_Behaviour { 
            
            /**
             * @desc    TC_CH_FE_BV_01: Verify that DUT updates its Context Data
             * @remark  [17575-3:2016], Clause 8.3 Attributes and data sets
             */
            testcase TC_CH_FE_BV_01() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData1));
                // Step2: Send ContextData13
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData13(valueof(m_aduHeader_default.tollContext))));
                // Step 3: Event defined in ContextData1 occurred
                f_userActions(cmdTrigger, raiseContext1Event);
                // Step4: Wait for ChargeReport message
                t_ac.start;
                alt { // Step5: Check IF (ChargeReport content according to ContextData13)
                    [] pco.receive(mw_chargeReport_contextData13) {
                        // Stop timer
                        t_ac.stop;
                        // Step5: pass
                        setverdict(pass);
                    } // mw_chargeReport_contextData13
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CH_FE_BV_01
            
        } // End of group Valid_Behaviour
        
        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
        
    } // End of group Context_Handling
    
    /**
     * @desc    These Test Purposes apply to: 
     * - Charge Report Configuration as claimed in [17575-3:2016], Clause B.4.3 Table B.8/11
     * - precedence Level as claimed in [17575-3:2016], Clause B.4.3 Table B.11/9
     * - send Charge Report If Entering as claimed in [17575-3:2016], Clause B.4.3 Table B.11/8
     * - Tariffs as claimed in [17575-3:2016], Clause B.4.3 Table B.16
     * - Rounding Rules for fee as claimed in [17575-3:2016], Clause B.4.3 Table B.19/1-3
     * - Supported Charge Units as claimed in [17575-3:2016], Clause B.4.3 Table B.17
     * - Currency Conversion Table as claimed in [17575-3:2016], Clause B.4.3 Table B.23
     */
    group Charge_Report {
        
        /**
         * @desc    Test subgroup objectives:
         * - to test the presence of particular data elements in Charge Report sent by DUT in relation to Charge Report Configuration;
         * - to test the absence of particular data elements in Charge Report sent by DUT in relation to Charge Report Configuration;
         * - to test the handling of precedence level for overlapping partitions
         * - to test the correctness of implementation of a fee calculation including rounding rules
         * - to test the usage of Authenticated Charge Report
         * @see [16410-1:2016], Clause A.3 Charge Report test purposes
         * @remark  59 TCs
         */
        group Valid_Behaviour {
            
            /**
             * @desc    TC_CR_FE_BV_01: Verify the presence of obeId data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_01() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_obeId(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if obeId is presnt
                    [] pco.receive(mw_chargeReport_obeId_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_obeId_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_01
            
            /**
             * @desc    TC_CR_FE_BV_02: Verify the absence of obeId data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_02() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_obeId(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if obeId is presnt
                    [] pco.receive(mw_chargeReport_obeId_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_obeId_not_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_02
            
            /**
             * @desc    TC_CR_FE_BV_03: Verify the presence of vehicleLPNr data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent 
             */
            testcase TC_CR_FE_BV_03() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_vehicleLPNr(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if vehicleLPNr is presnt
                    [] pco.receive(mw_chargeReport_vehicleLPNr_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_vehicleLPNr_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_03
            
            /**
             * @desc    TC_CR_FE_BV_04: Verify the absence of vehicleLPNr data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent 
             */
            testcase TC_CR_FE_BV_04() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_vehicleLPNr(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if vehicleLPNr is presnt
                    [] pco.receive(mw_chargeReport_vehicleLPNr_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_vehicleLPNr_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_04
            
            /**
             * @desc    TC_CR_FE_BV_05: Verify the presence of paymentMeans data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_05() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_paymentMeans(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if paymentMeans is presnt
                    [] pco.receive(mw_chargeReport_paymentMeans_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_paymentMeans_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_05
            
            /**
             * @desc    TC_CR_FE_BV_06: Verify the absence of paymentMeans data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_06() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_paymentMeans(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if paymentMeans is presnt
                    [] pco.receive(mw_chargeReport_paymentMeans_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_paymentMeans_not_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_06
            
            /**
             * @desc    TC_CR_FE_BV_07: Verify the presence of tollContext data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_07() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_tollContext(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if tollContext is presnt
                    [] pco.receive(mw_chargeReport_tollContext_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_tollContext_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_07
            
            /**
             * @desc    TC_CR_FE_BV_08: Verify the absence of tollContext data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_08() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_tollContext(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if tollContext is presnt
                    [] pco.receive(mw_chargeReport_tollContext_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_tollContext_not_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_08
            
            /**
             * @desc    TC_CR_FE_BV_09: Verify the presence of chargeReportFinalRecipient data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_09() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_chargeReportFinalRecipient(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportFinalRecipient is presnt
                    [] pco.receive(mw_chargeReport_chargeReportFinalRecipient_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_chargeReportFinalRecipient_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_09
            
            /**
             * @desc    TC_CR_FE_BV_10: Verify the absence of chargeReportFinalRecipient data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_10() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_chargeReportFinalRecipient(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportFinalRecipient is presnt
                    [] pco.receive(mw_chargeReport_chargeReportFinalRecipient_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_chargeReportFinalRecipient_not_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_10
            
            /**
             * @desc    TC_CR_FE_BV_11: Verify the presence of timeOfReport data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_11() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_timeOfReport(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if timeOfReport is presnt
                    [] pco.receive(mw_chargeReport_timeOfReport_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_timeOfReport_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_11
            
            /**
             * @desc    TC_CR_FE_BV_12: Verify the absence of timeOfReport data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_12() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_timeOfReport(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if timeOfReport is presnt
                    [] pco.receive(mw_chargeReport_timeOfReport_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_timeOfReport_not_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_12
            
            /**
             * @desc    TC_CR_FE_BV_13: Verify the presence of reportPeriod data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_13() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_reportPeriod(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if reportPeriod is presnt
                    [] pco.receive(mw_chargeReport_reportPeriod_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_reportPeriod_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_13
            
            /**
             * @desc    TC_CR_FE_BV_14: Verify the absence of reportPeriod data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_14() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_reportPeriod(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if reportPeriod is presnt
                    [] pco.receive(mw_chargeReport_reportPeriod_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_reportPeriod_not_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_14
            
            /**
             * @desc    TC_CR_FE_BV_15: Verify the presence of versionInfo data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_15() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_versionInfo(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if versionInfo is presnt
                    [] pco.receive(mw_chargeReport_versionInfo_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_versionInfo_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_15
            
            /**
             * @desc    TC_CR_FE_BV_16: Verify the absence of versionInfo data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_16() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_versionInfo(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if versionInfo is presnt
                    [] pco.receive(mw_chargeReport_versionInfo_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_versionInfo_not_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_16
            
            /**
             * @desc    TC_CR_FE_BV_17: Verify the presence of sumVatForThisSession data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.3.5.2.1 Data type ChargeReport
             */
            testcase TC_CR_FE_BV_17() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_sumVatForThisSession(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if sumVatForThisSession is presnt
                    [] pco.receive(mw_chargeReport_sumVatForThisSession_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_sumVatForThisSession_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_17
            
            /**
             * @desc    TC_CR_FE_BV_18: Verify the absence of sumVatForThisSession data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.3.5.2.1 Data type ChargeReport
             */
            testcase TC_CR_FE_BV_18() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
                
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_sumVatForThisSession(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if sumVatForThisSession is presnt
                    [] pco.receive(mw_chargeReport_sumVatForThisSession_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_sumVatForThisSession_not_present
                } // End of 'alt' statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_18
            
            /**
             * @desc    TC_CR_FE_BV_19: Verify the presence of accountStatus data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.3.5.2.1 Data type ChargeReport
             */
            testcase TC_CR_FE_BV_19() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_accountStatus(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if accountStatus is presnt
                    [] pco.receive(mw_chargeReport_accountStatus_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_accountStatus_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_19

            /**
             * @desc    TC_CR_FE_BV_20: Verify the absence of accountStatus data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.3.5.2.1 Data type ChargeReport
             */
            testcase TC_CR_FE_BV_20() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_accountStatus(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if accountStatus is presnt
                    [] pco.receive(mw_chargeReport_accountStatus_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_accountStatus_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_20

            /**
             * @desc    TC_CR_FE_BV_21: Verify the presence of chargeReportCounter data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_21() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_chargeReportCounter(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportCounter is presnt
                    [] pco.receive(mw_chargeReport_chargeReportCounter_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_chargeReportCounter_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_21

            /**
             * @desc    TC_CR_FE_BV_22: Verify the absence of chargeReportCounter data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_22() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_chargeReportCounter(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportCounter is presnt
                    [] pco.receive(mw_chargeReport_chargeReportCounter_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_chargeReportCounter_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_22

            /**
             * @desc    TC_CR_FE_BV_23: Verify the presence of mileage data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_23() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_mileage(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if mileage is presnt
                    [] pco.receive(mw_chargeReport_mileage_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_mileage_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_23

            /**
             * @desc    TC_CR_FE_BV_24: Verify the absence of mileage data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_24() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_mileage(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if mileage is presnt
                    [] pco.receive(mw_chargeReport_mileage_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_mileage_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_24

            /**
             * @desc    TC_CR_FE_BV_25: Verify the presence of listOfCccAttributes data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_25() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_listOfCCCAttributes(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfCccAttributes is presnt
                    [] pco.receive(mw_chargeReport_listOfCCCAttributes_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_listOfCCCAttributes_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_24

            /**
             * @desc    TC_CR_FE_BV_26: Verify the absence of listOfCccAttributes data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_26() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_listOfCCCAttributes(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfCccAttributes is presnt
                    [] pco.receive(mw_chargeReport_listOfCCCAttributes_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_listOfCCCAttributes_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_26

            /**
             * @desc    TC_CR_FE_BV_27: Verify the usage of authenticated Usage Statement
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_27() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (not(PICS_SECURED_MODE == true)) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_useOfUsageStatementAuthentication(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if authenticated is presnt
                    [] pco.receive(mw_chargeReport_UsageStatement_AuthenticatedUsageStatement_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_UsageStatement_AuthenticatedUsageStatement_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_27

            /**
             * @desc    TC_CR_FE_BV_28: Verify the usage of non-authenticated Usage Statement
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_28() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_useOfUsageStatementAuthentication(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if authenticated is presnt
                    [] pco.receive(mw_chargeReport_UsageStatement_AuthenticatedUsageStatement_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_UsageStatement_AuthenticatedUsageStatement_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_28

            /**
             * @desc    TC_CR_FE_BV_29: Verify the presence of usageStatementId data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_29() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_useOfUsageStatementId(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if usageStatementId is presnt
                    [] pco.receive(mw_chargeReport_useOfUsageStatementId_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_useOfUsageStatementId_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_29

            /**
             * @desc    TC_CR_FE_BV_30: Verify the absence of usageStatementId data element in Usage Statement
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_30() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_useOfUsageStatementId(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if usageStatementId is presnt
                    [] pco.receive(mw_chargeReport_useOfUsageStatementId_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_useOfUsageStatementId_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_30

            /**
             * @desc    TC_CR_FE_BV_31: Verify the presence of tollContext data element in Charge Report
             * @see     A.2.1 BV test purposes
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_31() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_useOfTollContext(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if tollContext is presnt
                    [] pco.receive(mw_chargeReport_usageStatementTollContext_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_usageStatementTollContext_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_31

            /**
             * @desc    TC_CR_FE_BV_32: Verify the absence of tollContext data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_32() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_useOfTollContext(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if tollContext is presnt
                    [] pco.receive(mw_chargeReport_usageStatementTollContext_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_usageStatementTollContext_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_32
            
            /**
             * @desc    TC_CR_FE_BV_33: Verify the presence of chargeReportFinalRecipient data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_33() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_chargeReportFinalRecipient(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportFinalRecipient is presnt
                    [] pco.receive(mw_chargeReport_chargeReportFinalRecipient_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_chargeReportFinalRecipient_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_33

            /**
             * @desc    TC_CR_FE_BV_34: Verify the absence of chargeReportFinalRecipient data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_34() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_chargeReportFinalRecipient(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if chargeReportFinalRecipient is presnt
                    [] pco.receive(mw_chargeReport_chargeReportFinalRecipient_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_chargeReportFinalRecipient_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_34

            /**
             * @desc    TC_CR_FE_BV_35: Verify the presence of aggregatedFee data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_35() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_aggregatedFee(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if aggregatedFee is presnt
                    [] pco.receive(mw_chargeReport_aggregatedFee_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_aggregatedFee_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_35

            /**
             * @desc    TC_CR_FE_BV_36: Verify the absence of aggregatedFee data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_36() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_aggregatedFee(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if aggregatedFee is presnt
                    [] pco.receive(mw_chargeReport_aggregatedFee_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_aggregatedFee_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_36

            /**
             * @desc    TC_CR_FE_BV_37: Verify the presence of sumVat data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_37() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_sumVat(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if sumVat is presnt
                    [] pco.receive(mw_chargeReport_sumVat_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_sumVat_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_37

            /**
             * @desc    TC_CR_FE_BV_38: Verify the absence of sumVat data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_38() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_sumVat(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if sumVat is presnt
                    [] pco.receive(mw_chargeReport_sumVat_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_sumVat_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_38

            /**
             * @desc    TC_CR_FE_BV_39: Verify the presence of aggregatedSingleTariffClassSession data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_39() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_aggregatedSingleTariffClassSession(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if aggregatedSingleTariffClassSession is presnt
                    [] pco.receive(mw_chargeReport_aggregatedSingleTariffClassSession_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_aggregatedSingleTariffClassSession_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_39

            /**
             * @desc    TC_CR_FE_BV_40: Verify the absence of aggregatedSingleTariffClassSession data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.3.5.2.2 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_40() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_aggregatedSingleTariffClassSession(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if aggregatedSingleTariffClassSession is presnt
                    [] pco.receive(mw_chargeReport_aggregatedSingleTariffClassSession_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_aggregatedSingleTariffClassSession_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_40

            /**
             * @desc    TC_CR_FE_BV_41: Verify the presence of listOfChargeObjects data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_41() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_listOfChargeObjects(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfChargeObjects is presnt
                    [] pco.receive(mw_chargeReport_listOfChargeObjects_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_listOfChargeObjects_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_41

            /**
             * @desc    TC_CR_FE_BV_42: Verify the absence of listOfChargeObjects data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_42() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_listOfChargeObjects(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfChargeObjects is presnt
                    [] pco.receive(mw_chargeReport_listOfChargeObjects_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_listOfChargeObjects_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_42

            /**
             * @desc    TC_CR_FE_BV_43: Verify the presence of listOfDSRCUsageData data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.3.5.2.2 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_43() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_listOfDSRCUsageData(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfDSRCUsageData is presnt
                    [] pco.receive(mw_chargeReport_listOfDSRCUsageData_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_listOfDSRCUsageData_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_43

            /**
             * @desc    TC_CR_FE_BV_44: Verify the absence of listOfDSRCUsageData data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.3.5.2.2 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_44() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_listOfDSRCUsageData(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfDSRCUsageData is presnt
                    [] pco.receive(mw_chargeReport_listOfDSRCUsageData_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_listOfDSRCUsageData_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_44

            /**
             * @desc    TC_CR_FE_BV_45: Verify the presence of listOfRawUsageData data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_45() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_listOfRawUsageData(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfRawUsageData is presnt
                    [] pco.receive(mw_chargeReport_listOfRawUsageData_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_listOfRawUsageData_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_45

            /**
             * @desc    TC_CR_FE_BV_46: Verify the absence of listOfRawUsageData data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_46() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_listOfRawUsageData(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if listOfRawUsageData is presnt
                    [] pco.receive(mw_chargeReport_listOfRawUsageData_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_listOfRawUsageData_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_46

            /**
             * @desc    TC_CR_FE_BV_47: Verify the presence of noUsage data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_47() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_noUsage(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if noUsage is presnt
                    [] pco.receive(mw_chargeReport_noUsage_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_noUsage_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_47

            /**
             * @desc    TC_CR_FE_BV_48: Verify the absence of noUsage data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_48() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_noUsage(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if noUsage is presnt
                    [] pco.receive(mw_chargeReport_noUsage_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_noUsage_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_48

            /**
             * @desc    TC_CR_FE_BV_49: Verify the presence of additionalUsageInformation data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_49() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_additionalUsageInformation(true))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if additionalUsageInformation is presnt
                    [] pco.receive(mw_chargeReport_additionalUsageInformation_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_additionalUsageInformation_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_49

            /**
             * @desc    TC_CR_FE_BV_50: Verify the absence of additionalUsageInformation data element in Charge Report
             * @remark  [17575-3:2016], Clause 8.5.5.3.3 Data type UsageStatementContent
             */
            testcase TC_CR_FE_BV_50() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader_default, m_contextData_chargeReport(valueof(m_aduHeader_default.tollContext), m_chargeReportConfiguration_additionalUsageInformation(false))));
                // Step2: Event defined in 41’D – ChargeReportingEvents occurred
                f_userActions(cmdTrigger, raiseChargeReportingEvents);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step4: Check if additionalUsageInformation is presnt
                    [] pco.receive(mw_chargeReport_additionalUsageInformation_not_present) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        setverdict(pass);
                    } // mw_chargeReport_additionalUsageInformation_not_present
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_50

            /**
             * @desc    TC_CR_FE_BV_51: Charge Report is sent separately upon the same precedenceLevel for overlapping Partitions
             * @remark  [17575-3:2016], Clause 8.5.2.3 Toll context partition overview
             */
            testcase TC_CR_FE_BV_51() runs on EutComp system TestAdapter {
                // Local variables
                var ChargeReport chargeReport := null; // Used to check specific values
                var integer v_stateCounter := 0;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData20 
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader, m_contextData20));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext20Partition1AndPartition2Event);
                // Step3/4/8: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] pco.receive(mw_chargeReport_contextData20_1(PX_TOLL_CONTEXT_ID_20)) -> value chargeReport { // Step 11
                        // Stop timer
                        t_ac.stop;
                        // Step5 : Verify that tollContext in Context Data message equals to tollContext in ChargeReport1 and ChargeReport2
                        if (match(chargeReport.usageStatementList[0].usageStatement.tollContext, m_contextData20.tollContextPartitionOverview.unsigned_data[0].tollContextPartitionId) == false) { 
                            // Step6: fail
                            setverdict(fail);
                         } else {
                            v_stateCounter := v_stateCounter + 1;
                            t_ac.start;
                            repeat;
                        }
                    } 
                    [] pco.receive(mw_chargeReport_contextData20_2) -> value chargeReport { // Step 11 
                        // Stop timer
                        t_ac.stop;
                        // Step6 : Verify that obeId is present only in one charge report (i.e. ChargeReport1 EXOR ChargeReport2)
                        if (match(chargeReport.usageStatementList[0].usageStatement.tollContext, m_contextData20.tollContextPartitionOverview.unsigned_data[0].tollContextPartitionId) == false) { 
                            // Step10: fail
                            setverdict(fail);
                        } else {
                           v_stateCounter := v_stateCounter + 1;
                           t_ac.start;
                           repeat;
                        }
                    }
                } // End of 'alt' statement
                if (v_stateCounter == 2) { // Step12
                    setverdict(pass);
                }
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_51

            /**
             * @desc    TC_CR_FE_BV_52: Charge Report is sent once upon the different precedenceLevel for overlapping Partitions
             * @remark  [17575-3:2016], Clause 8.5.2.3 Toll context partition overview
             */
            testcase TC_CR_FE_BV_52() runs on EutComp system TestAdapter {
                 // Local variables
                var ChargeReport chargeReport := null; // Used to check specific values
                var integer v_stateCounter := 0;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData21 
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader, m_contextData21));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext21Partition1AndPartition2Event);
                // Step3/4/8: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] pco.receive(mw_chargeReport_contextData21_1(PX_TOLL_CONTEXT_ID_21)) -> value chargeReport { 
                        // Stop timer
                        t_ac.stop;
                        // Step5 : Verify that tollContext in Context Data message equals to tollContext in ChargeReport1 and ChargeReport2
                        if (match(chargeReport.usageStatementList[0].usageStatement.tollContext, m_contextData20.tollContextPartitionOverview.unsigned_data[0].tollContextPartitionId) == false) { 
                            // Step7: fail
                            setverdict(fail);
                         } else {
                            v_stateCounter := v_stateCounter + 1;
                            t_ac.start;
                            repeat;
                        }
                    } 
                    [] pco.receive(mw_chargeReport_contextData21_2) -> value chargeReport { // Step 6: Verify that obeId is present in ChargeReport1 AND vehicleLPNr is absent
                        // Stop timer
                        t_ac.stop;
                        // Step8 : Verify that obeId is present only in one charge report (i.e. ChargeReport1 EXOR ChargeReport2)
                        if (match(chargeReport.usageStatementList[0].usageStatement.tollContext, m_contextData20.tollContextPartitionOverview.unsigned_data[1].tollContextPartitionId ) == false) { 
                            // Step9: fail
                            setverdict(fail);
                        } else {
                           v_stateCounter := v_stateCounter + 1;
                           t_ac.start;
                           repeat;
                        }
                    }
                } // End of 'alt' statement
                if (v_stateCounter == 2) { // Step12
                    setverdict(pass);
                }
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_52

            /**
             * @desc    TC_CR_FE_BV_53: Front End sends a charge report entering the toll context partition
             * @remark  [17575-3:2016], Clause 8.5.2.3 Toll context partition overview
             */
            testcase TC_CR_FE_BV_53() runs on EutComp system TestAdapter {
                
                // Local variables
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Front End enters a toll context partition area 
                f_userActions(cmdTrigger, raiseEntersTollContextPartitionAreaEvent);
                // Step2: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] pco.receive(
                        mw_chargeReport_tollContext(
                            PX_TOLL_CONTEXT_ID_1
                    )) { // Step 3: Verify that ChargeReport  for toll context is received
                        // Stop timer
                        t_ac.stop;
                        // Step4
                        setverdict(pass);
                    } 
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_53
            
            /**
             * @desc    TC_CR_FE_BV_54: Verify fee calculation algorithm - no rounding rules
             * @remark  [17575-3:2016], Clause 8.5.3.7 The fee calculation algorithm
             */
            testcase TC_CR_FE_BV_54() runs on EutComp system TestAdapter {
                // Local variables
                var ChargeReport v_chargeReport := null; // Used to check fee calculation algorithm
                var template (value) Iso17575_3AduBody v_context;
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End received a context data for toll context (TC1) and toll context partition (TCP1), including toll context partition layout.
                // Front End received a context data defining tariff class AND local vehicle class/ time class / user class (or any combination).
                // While operating in the toll context partition TCP1, the Front End is able to assign a specific tariff class (Tariff1).
                // There is no unreported usage.
                // InternalScaleFactor equals to 1.
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData22 
                v_context := m_contextData22;
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader, v_context));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext22Event);
                // Step 3: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu_chargeReport(
                        mw_chargeReport_tollContext( // Step 4: Verify that tollContext equals to TC1 AND Verify that usageStatementList[i].tollContext equals to TC1
                            v_context.tollContextOverview.unsigned_data.tollContext
                        ),
                        v_chargeReport,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step6
                        if (f_check_compliancy_TariffClass( // No rounding rules
                            v_chargeReport.usageStatementList, 
                            v_context.tariffTable.unsigned_data[0]
                        ) == false) {
                            // Step7: fail
                            setverdict(fail);
                        } else {
                            setverdict(pass);
                        }
                    } 
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_54
            
            /**
             * @desc    TC_CR_FE_BV_55: Verify fee calculation algorithm with rounding up rule for charge units
             * @remark  [17575-3:2016], Clause 8.5.3.7 The fee calculation algorithm
             */
            testcase TC_CR_FE_BV_55() runs on EutComp system TestAdapter {
                // Local variables
                var ChargeReport v_chargeReport := null; // Used to check fee calculation algorithm
                var template (value) Iso17575_3AduBody v_context;
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End received a context data for toll context (TC1) and toll context partition (TCP1), including toll context partition layout.
                // Front End received a context data defining tariff class AND local vehicle class/ time class / user class (or any combination).
                // While operating in the toll context partition TCP1, the Front End is able to assign a specific tariff class (Tariff1).
                // There is no unreported usage.
                // InternalScaleFactor equals to 1.
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData23 
                v_context := m_contextData23;
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader, v_context));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext23Event);
                // Step 3: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu_chargeReport(
                        mw_chargeReport_contextData23( // Step 4: Verify that tollContext equals to TC1 AND Verify that usageStatementList[i].tollContext equals to TC1
                            v_context.tollContextOverview.unsigned_data.tollContext
                        ),
                        v_chargeReport,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step6
                        if (f_check_compliancy_TariffClass(
                            v_chargeReport.usageStatementList, 
                            v_context.tariffTable.unsigned_data[0],
                            true  // Apply rounding rules 'up'
                        ) == false) {
                            // Step7: fail
                            setverdict(fail);
                        } else {
                            setverdict(pass);
                        }
                    } 
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_55
            
            /**
             * @desc    TC_CR_FE_BV_56: Verify fee calculation algorithm with rounding down rule for charge units
             * @remark  [17575-3:2016], Clause 8.5.3.7 The fee calculation algorithm
             */
            testcase TC_CR_FE_BV_56() runs on EutComp system TestAdapter {
                // Local variables
                var ChargeReport v_chargeReport := null; // Used to check fee calculation algorithm
                var template (value) Iso17575_3AduBody v_context;
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End received a context data for toll context (TC1) and toll context partition (TCP1), including toll context partition layout.
                // Front End received a context data defining tariff class AND local vehicle class/ time class / user class (or any combination).
                // While operating in the toll context partition TCP1, the Front End is able to assign a specific tariff class (Tariff1).
                // There is no unreported usage.
                // InternalScaleFactor equals to 1.
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData24 
                v_context := m_contextData24;
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader, v_context));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext24Event);
                // Step 3: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu_chargeReport(
                        mw_chargeReport_contextData24( // Step 4: Verify that tollContext equals to TC1 AND Verify that usageStatementList[i].tollContext equals to TC1
                            v_context.tollContextOverview.unsigned_data.tollContext
                        ),
                        v_chargeReport,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step6
                        if (f_check_compliancy_TariffClass(
                            v_chargeReport.usageStatementList, 
                            v_context.tariffTable.unsigned_data[0],
                            true  // Apply rounding rules 'down'
                        ) == false) {
                            // Step7: fail
                            setverdict(fail);
                        } else {
                            setverdict(pass);
                        }
                    } 
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_56
            
            /**
             * @desc    TC_CR_FE_BV_57: Verify fee calculation algorithm in alternative currency
             * @remark  [17575-3:2016], Clause 8.5.3.2.3 EFC attribute CurrencyConversionTable
             * @remark  [17575-3:2016], Clause 8.5.3.7 The fee calculation algorithm
             */
            testcase TC_CR_FE_BV_57() runs on EutComp system TestAdapter {
                // Local variables
                var ChargeReport v_chargeReport := null; // Used to check fee calculation algorithm
                var template (value) Iso17575_3AduBody v_context;
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End received a context data for toll context (TC1) and toll context partition (TCP1), including toll context partition layout.
                // Front End received a context data defining tariff class AND local vehicle class/ time class / user class (or any combination).
                // While operating in the toll context partition TCP1, the Front End is able to assign a specific tariff class (Tariff1).
                // There is no unreported usage.
                // InternalScaleFactor equals to 1.
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData25 
                v_context := m_contextData25;
                f_pco_send_iso17575_3Adu(m_iso17575_3Adu(m_aduHeader, v_context));
                // Step2: Event defined for Partition1 and Partition2 occurred
                f_userActions(cmdTrigger, raiseContext25Event);
                // Step 3: Wait for ChargeReport messages
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu_chargeReport(
                        mw_chargeReport_contextData25( // Step 4: Verify that tollContext equals to TC1 AND Verify that usageStatementList[i].tollContext equals to TC1
                            v_context.tollContextOverview.unsigned_data.tollContext
                        ),
                        v_chargeReport,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step6
                        if (f_check_compliancy_TariffClass(
                            v_chargeReport.usageStatementList, 
                            v_context.tariffTable.unsigned_data[0],
                            true  // Apply rounding rules 'down'
                        ) == false) {
                            // Step7: fail
                            setverdict(fail);
                        } else {
                            setverdict(pass);
                        }
                    } 
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_57
            
            /**
             * @desc    TC_CR_FE_BV_58: Verify the usage of authenticated Charge Report
             * @remark  [17575-3:2016], Clause Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_58() runs on EutComp system TestAdapter {
                
                // Local variables
                var boolean v_result;
                var ChargeReport v_chargeReport;
                
                // Test control
                if (not(PICS_SECURED_MODE)) {
                    log("*** " & testcasename() & ": PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1 in secured mode
                f_pco_send_iso17575_3Adu(
                    m_iso17575_3Adu(
                        m_aduHeader_default, 
                        m_contextData1
                ));
                // Step2: Event defined in ContextData1 occurred
                f_userActions(cmdTrigger, raiseContext1Event);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step3: Check if tollContext in ChargeReport equals to tollContextOverview.tollContext in ContextData1
                    [] a_pco_recv_iso17575_3Adu_chargeReport(
                        mw_chargeReport_tollContext(
                            valueof(
                                m_contextData1.tollContextOverview.unsigned_data.tollContext
                        )),
                        v_chargeReport,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        if (v_result == true) {
                            setverdict(pass);
                        } else {
                            setverdict(fail);
                        }
                    }
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_58
            
            /**
             * @desc    TC_CR_FE_BV_59: Verify the usage of non-authenticated Charge Report
             * @remark  [17575-3:2016], Clause Clause 8.5.5.3.2 Data type ChargeReportContent
             */
            testcase TC_CR_FE_BV_59() runs on EutComp system TestAdapter {
                
                // Local variables
                var boolean v_result;
                var ChargeReport v_chargeReport;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Front End is initialized and can accept Context Data - Assume it's true
                // OBU belonging to the Front End is located within geographic borders defined in Context Data - Assume it's true
                // Version of any data element of context data is known for the Front End - Assume it's true
                // No authentication is required by the Front End
                // Preamble done
    
                // Test body start
                // Step1: Send ContextData1 in non secured mode
                f_pco_send_iso17575_3Adu(
                    m_iso17575_3Adu(
                        m_aduHeader_default, 
                        m_contextData1(
                            valueof(m_aduHeader_default.tollContext)
                )));
                // Step2: Event defined in ContextData1 occurred
                f_userActions(cmdTrigger, raiseContext1Event);
                // Step3: Wait for ChargeReport message
                t_ac.start;
                alt { // Step3: Check if tollContext in ChargeReport equals to tollContextOverview.tollContext in ContextData1
                    [] a_pco_recv_iso17575_3Adu_chargeReport(
                        mw_chargeReport_tollContext(
                            valueof(
                                m_contextData1.tollContextOverview.unsigned_data.tollContext
                        )),
                        v_chargeReport,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step4: Set verdict pass
                        if (v_result == true) {
                            setverdict(pass);
                        } else {
                            setverdict(fail);
                        }
                    }
                } // End of 'alt' statement
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_CR_FE_BV_59
            
        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
        
    } // End of group Charge_Report

    /**
     * @desc    These Test Purposes apply to Communication services support as claimed in [TS 17575-3] clause B.6.4.2/1, and EFC Attributes as claimed in [TS 17575-3] clause B.6.4.3/1-9
     * @see     [16410-1:2016], Clause B.2 Procedural test purposes
     */
    group Procedural {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to protocol version handling
         * - to test the behaviour of the DUT in relation to authenticated ISO17575-3Adu
         * @see [16410-1:2016], Clause B.2  Procedural test purposes
         * @remark  2 TCs
         */
        group Valid_Behaviour {
            
            /**
             * @desc    TC_PRO_BE_BV_01: Protocol version handling
             * @remark  [17575-3:2016], Clause 6.3.1 Protocol versioning
             */
            testcase TC_PRO_BE_BV_01() runs on EutComp system TestAdapter {
                
                // Local variables
                var Iso17575_3Adu v_adu1 := null; // Used to retrieve data elements list
                var Iso17575_3Adu v_adu2 := null; // Used to retrieve data elements list
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step1: Trigger one ISO17575-3ADU message
                f_userActions(cmdTrigger, raiseADU);
                // Step1: Wait for ISO17575-3ADU message
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_TollContext,
                        v_adu1,
                        v_result
                    ) { // Step2: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // Step3: Toll Regime properties changed. DUT needs to provision up-to-date context data
                        f_userActions(cmdInc, incTollRegime);
                        // Step4: Wait for the second ISO17575-3ADU message
                        t_ac.start;
                        alt {
                            [] a_pco_recv_iso17575_3Adu(
                                mw_iso17575_3Adu_TollContext(v_adu1.aduHeader.tollContext),
                                v_adu2,
                                v_result
                            ) { // Step5: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                                // Stop timer
                                t_ac.stop;
                                // Step7: Compare the corresponding data elements in A1 and A2 consisting of Version information indicator (data type: VersionAndValidity)
                                if (f_compareDataElements(v_adu1.aduBody, v_adu2.aduBody) == false) {
                                    // Step7: fail
                                    setverdict(fail);
                                } else {
                                    // Step7: pass
                                    setverdict(pass);
                                }
                            }
                        }
                    }
                }
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_PRO_BE_BV_01
            
            /**
             * @desc    TC_PRO_BE_BV_02: Verify that Back End sends authenticated ISO17575-3Adu
             * @remark  [17575-3:2016], 7.2 Message authentication (data type Iso17575-3-InformationContent)
             */
            testcase TC_PRO_BE_BV_02() runs on EutComp system TestAdapter {
                
                // Local variables
                var Iso17575_3Adu v_adu1 := null; // Used to retrieve data elements list
                var Iso17575_3Adu v_adu2 := null; // Used to retrieve data elements list
                var boolean v_result := false;
                
                // Test control
                if (not(PICS_SECURED_MODE)) {
                    log("*** " & testcasename() & ": PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step1: Trigger one ISO17575-3ADU message
                f_userActions(cmdTrigger, raiseADU);
                // Step1: Wait for ISO17575-3ADU message
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_TollContext, 
                        v_adu1, 
                        v_result
                    ) { // Step2: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        if (v_result == false) {
                            setverdict(fail);
                            break; // Exit loop message
                        }
                        // Step3: Toll Regime properties changed. DUT needs to provision up-to-date context data
                        f_userActions(cmdInc, incTollRegime);
                        // Step4: Wait for the second ISO17575-3ADU message
                        t_ac.start;
                        alt {
                            [] a_pco_recv_iso17575_3Adu(
                                mw_iso17575_3Adu_TollContext(v_adu1.aduHeader.tollContext),
                                v_adu2,
                                v_result
                            ) { // Step5: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                                // Stop timer
                                t_ac.stop;
                                if (v_result == false) {
                                    setverdict(fail);
                                    break; // Exit loop message
                                }
                                // Step7: Compare the corresponding data elements in A1 and A2 consisting of Version information indicator (data type: VersionAndValidity)
                                if (f_compareDataElements(v_adu1.aduBody, v_adu2.aduBody) == false) {
                                    // Step7: fail
                                    setverdict(fail);
                                } else {
                                    // Step7: pass
                                    setverdict(pass);
                                }
                            }
                        }
                    }
                }
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_PRO_BE_BV_02
            
        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Procedural

    /**
     * @desc    These Test Purposes apply to  Iso17575-3Adu as claimed in [TS 17575-3] clause B.6.4.1/1
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.3 ADU Header test purposes
     * @remark  2 TCs
     */
    group ADU_Header {

        /**
         * @desc    Test subgroup objective:
         * - To test the usage of single tollContext within an ADU
         * - To test the behaviour of the DUT in relation to ADU Sequence Number.
         * @see [16410-1:2016], Clause B.3  ADU Header test purposes
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_ADUH_BE_BV_01: Use of single tollContext per ADU
             * @remark  [17575-3:2016], Clause 7.5 Application data unit body (data type ISO 17575-3AduBody)
             * @remark  [17575-3:2016], Clause 8.2 Rules with respect to support of context data
             * @remark  [17575-3:2016], Clause 8.5.2.2 Toll context overview
             */
            testcase TC_ADUH_BE_BV_01() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu; // Used to retrieve contextId value
                var charstring v_uniquenessOfContextIDFound := ";"; // List of the Context ID already received
                var charstring v_pattern;
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template charstring v_searched_pattern; // Used by regexp to check the uniqueness of Context ID
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_tollContext matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and has n Toll Contexts defined.
                // Back End sends Context Data for each Toll Context.
                // Preamble done

                // Test body start
                // Step N: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs);
                // StepN+1: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_TollContext(v_tollContext),
                        v_adu,
                        v_result
                    ) { // Step N+2: Verify structure of sent Iso17575-3Adus, taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Check for the uniqueness of Context ID within the Toll Charger
                        v_pattern := bit2str(v_adu.aduHeader.tollContext.countryCode) & int2str(v_adu.aduHeader.tollContext.providerIdentifier);
                        v_searched_pattern := pattern "*({v_pattern})*";
                        if (regexp(v_uniquenessOfContextIDFound, v_searched_pattern, 0) == v_pattern) {
                            setverdict(fail); // v_contextId exist at least 1 times, uniqueness is not verified
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        v_uniquenessOfContextIDFound := v_uniquenessOfContextIDFound & v_pattern & ";";
                        // Prepare for next message
                        t_ac.start;
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                }
                // Test body done
    
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_ADUH_BE_BV_01

            /**
             * @desc    TC_ADUH_BE_BV_02: Verify handling of aduSequenceNumber
             * @remark  [17575-3:2016], Clause 7.4 Application data unit header (data type ISO 17575-3AduHeader)
             */
            testcase TC_ADUH_BE_BV_02() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu1 := null; // Used to retrieve aduSequenceNumber value #1
                var Iso17575_3Adu v_adu2 := null; // Used to retrieve aduSequenceNumber value #2
                var boolean v_result;
                
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step1: Trigger one ISO17575-3ADU message
                f_userActions(cmdTrigger, raiseADU);
                // Step1: Wait for ISO17575-3ADU message
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_default,
                        v_adu1,
                        v_result
                    ) {
                        // Stop timer
                        t_ac.stop;
                        // Step2: Trigger ISO17575-3ADU send message
                        f_userActions(cmdTrigger, raiseADU);
                        // Step2: Wait for the second ISO17575-3ADU message
                        t_ac.start;
                        alt {
                            [] a_pco_recv_iso17575_3Adu(
                                mw_iso17575_3Adu_default,
                                v_adu2,
                                v_result
                            ) {
                                // Stop timer
                                t_ac.stop;
                                // Step5: aduSequenceNumber2 == aduSequenceNumber1 + 1
                                if (v_adu2.aduHeader.aduSequenceNumber != (v_adu1.aduHeader.aduSequenceNumber + 1)) {
                                    // Step5: fail
                                    setverdict(fail);
                                } else {
                                    // Step5: pass
                                    setverdict(pass);
                                }
                            }
                        }
                    }
                }
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_ADUH_BE_BV_02
        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group ADU_Header

    /**
     * @desc    These Test Purposes apply to EFCAttributes as claimed in [TS 17575-3] clause B.6.4.3/1-9
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     */
    group ADU_Attribute {

        /**
         * @desc    Test subgroup objective:
         * - to test the availability of all mandatory attributes
         * @see [16410-1:2016], Clause B.3 ADU Header test purposes
         */
        group Valid_Behaviour {

            /**
             * @desc    TC_ADUB_BE_BV_01: Verify that each toll context shall be described using one or more EFC attributes
             * @remark  [17575-3:2016], Clause 8.3 Attributes and data sets
             */
            testcase TC_ADUB_BE_BV_01() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu1 := null; // Used to retrieve AttributeList data elements
                var Iso17575_3Adu v_adu2 := null; // Used to retrieve AttributeList data elements
                var template (present) Provider v_tollContext := ?; // Used for tollContext
                var boolean v_result := false;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done

                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs_TollContext);
                // Step2: Wait for ISO17575-3ADU message
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tariffTable_tollContextPartitionOverview_TollCharger(v_tollContext),
                        v_adu1,
                        v_result
                    ) { // Step4
                        // Stop timer
                        t_ac.stop;
                        // Step3
                        if (v_result == false) { 
                            setverdict(fail);
                        }
                    }
                } // End of alt statement
                // Step 6#1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs_TollContext);
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu( // Step9: Verify that B0 consists of at least 1 attribute
                        mw_iso17575_3Adu_tariffTable_tollContextPartitionOverview_TollCharger(v_tollContext),
                        v_adu2,
                        v_result
                    ) { // Step4
                        // Stop timer
                        t_ac.stop;
                        // Step8
                        if (v_result == false) { 
                            setverdict(fail);
                        } else {
                            if (not match(v_adu1.aduHeader.tollContext, v_adu2.aduHeader.tollContext)) { // Step6#2
                                setverdict(fail);
                            } else {
                                // Step10
                                setverdict(pass);
                            }
                        }
                    }
                } // End of alt statement
                // Test body done
                
                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_ADUB_BE_BV_01

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group ADU_Attribute

    /**
     * @desc    These Test Purposes apply to TollContextOverview as claimed in [TS 17575-3] clause B.6.4.3/1 and OperationalStatus as claimed in [TS 17575-3] clause B.6.4.6
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  3 TCs
     */
    group Toll_Context_Overview {

        /**
         * @desc    Test subgroup objective:
         * - To test the behaviour of the DUT in relation to Toll Context Overview and Toll Context Partition Overview attribute
         * @see [16410-1:2016], Clause B.5  Toll Context Overview and Toll Context Parition Overview test purposes
         */
        group Valid_Behaviour {

            /**
             * @desc    TC_TC_BE_BV_01: Uniqueness of partition IDs within the Context Data
             * @remark  [17575-3:2016], Clause 8.5.2.2 Toll context overview
             * @see     [17575-3:2016], Table 3 — EFC attribute TollContextOverview (informative)
             */
            testcase TC_TC_BE_BV_01() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var charstring v_tollContextFound := ";"; // Used to build the list of the tollContext already processed
                var charstring v_tollContextPattern; // tollContext currently processed
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var template charstring m_found_pattern; // Used in regex to verify that 'tollContext' was not found before
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and has n Toll Regimes defined
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Regime
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tollContextOverview_tollContext(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Check that number of instances of ‘TollContextOverview’ attribute equals to 1
                        // Here, we are sure there is at least one instance of ‘TollContextOverview’ attribute, check uniqueness now
                        v_tollContextPattern := bit2str(v_adu.aduBody.tollContextOverview.unsigned_data.tollContext.countryCode) & int2str(v_adu.aduBody.tollContextOverview.unsigned_data.tollContext.providerIdentifier);
                        m_found_pattern := pattern "*({v_tollContextPattern})*";
                        if (regexp(v_tollContextFound, m_found_pattern, 0) == v_tollContextPattern) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from 'alt' statement
                        }
                        // tollContext non found, add current tollContext into the built list
                        v_tollContextFound := v_tollContextFound & v_tollContextPattern & ";";

                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TC_BE_BV_01

            /**
             * @desc    TC_TC_BE_BV_02: Verify the presence of at least one partition within the Context Data (presence of partitionID)
             * @remark  [17575-3:2016], Clause 8.5.2.2 Toll context overview
             * @see     [17575-3:2016], Table 3 — EFC attribute TollContextOverview (informative)
             */
            testcase TC_TC_BE_BV_02() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu := null; // Used to retrieve operationalStatus field
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;

                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs);
                // Step1: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tollContextOverview_tollContext(v_tollContext),
                        v_adu,
                        v_result
                    ) { // Step2
                        // Stop timer
                        t_ac.stop;
                        // step4
                        if (sizeof(v_adu.aduBody.tollContextPartitionOverview.unsigned_data) == 0) {
                            // Step4: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break;
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        // Step4: pass
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TC_BE_BV_02

            /**
             * @desc    TC_TC_BE_BV_03: Verify that polygon points are defined in a way that the connections between the points do not intersect.
             * @remark  [17575-3:2016], Clause 8.5.2.2 Toll context overview
             * @see     [17575-3:2016], Table 3 — EFC attribute TollContextOverview (informative)
             */
            testcase TC_TC_BE_BV_03() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu := null; // Used to retrieve operationalStatus field
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data consisting of toll context partition overview, including Polygon
                // Preamble done
    
                // Test body start
                // Step1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs);
                // Step1: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tollContextOverview_tollContext(v_tollContext),
                        v_adu,
                        v_result
                    ) { // Step2
                        // Stop timer
                        t_ac.stop;
                        // step4
                        for (var integer v_idx := 0; v_idx < sizeof(v_adu.aduBody.tollContextPartitionOverview.unsigned_data); v_idx := v_idx + 1) {
                            if (ispresent(v_adu.aduBody.tollContextPartitionOverview.unsigned_data[v_idx].tollContextPartitionBoundingPolygon)) {
                                if (fx_isPolygonPointsIntersect(v_adu.aduBody.tollContextPartitionOverview.unsigned_data[v_idx].tollContextPartitionBoundingPolygon) == true) {
                                    // Step4: fail
                                    setverdict(fail);
                                    t_runningDuration.stop;
                                    break;
                                }
                            } 
                        } // End of 'for' statement
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        // Step4: pass
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TC_BE_BV_03

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Toll_Context_Overview

    /** 
     * @desc    These Test Purposes apply to  TariffTable as claimed in [TS 17575-3] clause B.6.4.3/2, Toll Scheme Types as claimed in [TS 17575-3] clause B.6.4.5.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  3 TCs
     */
    group Tariff_Table {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Tariff Table attribute
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_TT_BE_BV_02: Verify that type of Charge Unit is compliant to Toll Context Partition Type
             * @remark  [17575-3:2016], Clause 8.5.3.2.2. EFC attribute TariffTable
             * @see     [17575-3:2016], Table 6 — Data type Tariff (informative)
             */
            testcase TC_TT_BE_BV_02() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tariffTable_tollContextPartitionOverview_TollCharger(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TariffTable’ attribute, check uniqueness now
                        if (f_check_compliancy_chargeUnit_tollContextPartitionType(
                            v_adu.aduBody.tollContextPartitionOverview.unsigned_data, 
                            v_adu.aduBody.tariffTable.unsigned_data
                        ) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TT_BE_BV_02

            /**
             * @desc    TC_TT_BE_BV_03: Verify that Tariff Class is unique within one toll context
             * @remark  [17575-3:2016], Clause 8.5.3.2.2 Data type Tariff
             * @see     [17575-3:2016], Table 6 — Data type Tariff (informative)
             */
            testcase TC_TT_BE_BV_03() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tariffTable_TollCharger(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TariffTable’ attribute, check uniqueness now
                        if (f_check_uniqueness_tariffClassID(v_adu.aduBody.tariffTable.unsigned_data) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TT_BE_BV_03

            /**
             * @desc    TC_TT_BE_BV_04: Verify presence of Currency Conversion Table when alternative currency is valid for a tariff class
             * @remark  [17575-3:2016], Clause Clause 8.5.3.2.3 EFC attribute CurrencyConversionTable
             * @see     [17575-3:2016], Table 7 — EFC attribute CurrencyConversionTable (informative)
             */
            testcase TC_TT_BE_BV_04() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tariffTable_TollCharger(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TariffTable’ attribute, check uniqueness now
                        if (f_check_currencyConversionTable(v_adu.aduBody.tariffTable.unsigned_data) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TT_BE_BV_04

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Tariff_Table

    /**
     * @desc    These Test Purposes apply to  TariffClassDefinition as claimed in [TS 17575-3] clause B.6.4.3/3 and B.6.4.8.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  2 TCs
     */
    group Tariff_Class_Definition {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Tariff Class Defnition attribute
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_TACD_BE_BV_01: Verify that each combination of vehicle, time, location and user class leads to one and only one Tariff Class
             * @remark  [17575-3:2016], Clause 8.5.3.3.1 General principle
             * @see     [17575-3:2016], Table 9 — Data type TariffClass (informative), Figure 6 — Principle of creation of tariff classes
             */
            testcase TC_TACD_BE_BV_01() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tariffClassDefinition_TollCharger(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Verify whether each combination of time, vehicle, location and user class leads to exactly one Tariff Class in A22.tariffClasses[i]
                        // Here, we are sure there is at least one instance of ‘TariffClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_tariffClasses(v_adu.aduBody.tariffClassDefinition.unsigned_data.tariffClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TACD_BE_BV_01

            /**
             * @desc    TC_TACD_BE_BV_02: Verify that Tariff Class ID is unique within one toll context within TariffClassDefinition attribute
             * @remark  [17575-3:2016], Clause 8.5.3.3.1 General principle
             * @see     [17575-3:2016], Table 9 — Data type TariffClass (informative), Figure 6 — Principle of creation of tariff classes
             */
            testcase TC_TACD_BE_BV_02() runs on EutComp system TestAdapter {
                // Local variables
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tariffClassDefinition_TollCharger(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Verify uniqueness of tariclassid in A22.tariffClasses[i]
                        // Here, we are sure there is at least one instance of ‘TariffClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_tariffClassID_1(v_adu.aduBody.tariffClassDefinition.unsigned_data.tariffClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TACD_BE_BV_02

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Tariff_Class_Definition

    /**
     * @desc    These Test Purposes apply to  LocalVehicleClassDefinition as claimed in [TS 17575-3] clause B.6.4.3/4.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  2 TCs
     */
    group Local_Vehicle_Class_Definition {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Local Vehicle Class Definition attribute.
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_LVCD_BE_BV_01: Verify that Local Vehicle Class Id is unique
             * @remark  [17575-3:2016], Clause 8.5.3.4.2 Data type LocalVehicleClass
             * @see     [17575-3:2016], Table 11 — Data type LocalVehicleClass (informative)
             */
            testcase TC_LVCD_BE_BV_01() runs on EutComp system TestAdapter {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data. Local Vehicle Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_localVehicleClassDefinition_TollCharger(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘LocalVehicleClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_localVehicleClassId(v_adu.aduBody.localVehicleClassDefinition.unsigned_data.localVehicleClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_LVCD_BE_BV_01

            /**
             * @desc    TC_LVCD_BE_BV_02: Verify that Priority Value is different for overlapping Vehicle Classes
             * @remark  [17575-3:2016], Clause 8.5.3.4.2 Data type LocalVehicleClass
             * @see     [17575-3:2016], Table 11 — Data type LocalVehicleClass (informative)
             * EXAMPLE 4    Vehicle class 45 is defined as all trucks having an overall length of 6,50 m to 12,50 m. Priority level for this class is set to 8. Vehicle class 46 is defined as all trucks having an overall length of 8,00 m to 15,00 m. Priority level for this class is set to 5. In case a vehicle would fall into both classes as it has a length of 10,65 m it has to be grouped into vehicle class 45 as the priority level of class 45 is higher
             */
            testcase TC_LVCD_BE_BV_02() runs on EutComp system TestAdapter {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data. Local Vehicle Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_localVehicleClassDefinition_TollCharger(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘LocalVehicleClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_priorityValue_by_group_localVehicleClass(v_adu.aduBody.localVehicleClassDefinition.unsigned_data.localVehicleClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt clause
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_LVCD_BE_BV_02

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Local_Vehicle_Class_Definition
    /**
     * @desc    These Test Purposes apply to  TimeClassDefinition as claimed in [TS 17575-3] clause B.6.4.3/5, and Priority Value as claimed in [TS 17575-3] clause B.6.4.12/1.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  2 TCs
     */
    group Time_Class_Definition {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Time Class Definition attribute.
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_TICD_BE_BV_01: Verify that Time Class Id is unique
             * @remark  [17575-3:2016], 8.5.3.5.2 Date type TimeClass
             * @see     [17575-3:2016], Table 13 — Data type TimeClass (informative)
             */
            testcase TC_TICD_BE_BV_01() runs on EutComp system TestAdapter {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data. Time Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_timeclassdef_TollCharger_ContextId(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TimeClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_timeClassId(v_adu.aduBody.timeClassDefinition.unsigned_data.timeClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TICD_BE_BV_01

            /**
             * @desc    TC_TICD_BE_BV_02: Verify that Priority Value is different for overlapping Time Classes
             * @remark  [17575-3:2016], 8.5.3.5.2 Date type TimeClass
             * @see     [17575-3:2016], Table 13 — Data type TimeClass (informative)
             */
            testcase TC_TICD_BE_BV_02() runs on EutComp system TestAdapter {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data. Time Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_timeclassdef_TollCharger_ContextId(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TimeClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_priorityValue_by_group_timeClass(v_adu.aduBody.timeClassDefinition.unsigned_data.timeClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TICD_BE_BV_02

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Time_Class_Definition
    /**
     * @desc    These Test Purposes apply to  UserClassDefinition as claimed in [TS 17575-3] clause B.6.4.3/6.
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     * @remark  2 TCs
     */
    group User_Class_Definition {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to User Class Definition attribute.
         */
        group Valid_Behaviour {
            /**
             * @desc    TC_USCD_BE_BV_01: Verify that User Class Id is unique
             * @remark  [17575-3:2016], Clause 8.5.3.6.2 Data type UserClass
             * @see     [17575-3:2016], Table 15 — Data type UserClass (informative)
             */
            testcase TC_USCD_BE_BV_01() runs on EutComp system TestAdapter {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data. User Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_userclassdef_TollCharger_ContextId(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: Were, we are sure there is at least one instance of ‘UserClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_userClassId(v_adu.aduBody.userClassDefinition.unsigned_data.userClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_USCD_BE_BV_01

            /**
             * @desc    TC_USCD_BE_BV_02: Verify that Priority Value is different for overlapping User Classes
             * @remark  [17575-3:2016], Clause 8.5.3.6.2 Data type UserClass
             * @see     [17575-3:2016], Table 15 — Data type UserClass (informative)
             */
            testcase TC_USCD_BE_BV_02() runs on EutComp system TestAdapter {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data. User Class Definition is present in ADU
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_userclassdef_TollCharger_ContextId(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘UserClassDefinition’ attribute, check uniqueness now
                        if (f_check_uniqueness_priorityValue_by_group_userClass(v_adu.aduBody.userClassDefinition.unsigned_data.userClasses) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_USCD_BE_BV_02

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group User_Class_Definition
    /**
     * @desc    These Test Purposes apply to:
     * - Toll Context Partition Layout as claimed in [17575-3:2016], Clause B.5.3 Table B.122,
     * - Supported layout types as claimed in [17575-3:2016], Clause B.5.3 Table B.122,
     * - Section Layout Description as claimed in [17575-3:2016], Clause B.5.3 Table B.124 (TCL-S),
     * - Area Layout Description as claimed in [17575-3:2016], Clause B.5.3 Table B.138 (TCL-A),
     * - Road Network object as claimed in [17575-3:2016], Clause B.5.3 Table B.139 (TCL-A),
     * - Cordon Layout Description as claimed in [17575-3:2016], Clause B.5.3 Table B.142 (TCL-C),
     * - Cordon Entry Location Description as claimed in ISO 17575-3 B.5.3 Table B.145 (TCL-C),
     * - Cordon Exit Location Description as claimed in ISO 17575-3 B.5.3 Table B.145 (TCL-C).
     * @see     Electronic fee collection (EFC) — Conformity evaluation of Front End and Back End equipment to ISO 17575-3 — Part 1: Test suite structure and test purpose - Clause B.4 Attribute general test purposes
     */
    group Toll_Context_Layout {

        /**
         * @desc    Test subgroup objective:
         * - to test the behaviour of the DUT in relation to Toll Context Layout attribute for section layout description (ATTR-31S), Section List for section layout description (ATTR-31L), area layout description (ATTR-31A), and cordon  layout description (ATTR-31C).
         * @remark 19 TCs
         */
        group Valid_Behaviour {
            
            /**
             * @desc    TC_TCL_BE_BV_01: Verify that Layout Description is compliant to Toll Context Partition Type
             * @remark  [17575-3:2016], Clause 8.5.4 Requirements with regards to context layout
             * @see     [17575-3:2016], Table 16 — Data type TollContextPartitionLayout (informative)
             */
            testcase TC_TCL_BE_BV_01() runs on EutComp system TestAdapter {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // StepN: Wait for ISO17575-3ADU message
                t_runningDuration.start;
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(v_tollContext),
                        v_adu,
                        v_result
                    ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                        // Stop timer
                        t_ac.stop;
                        // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                        if (f_check_compliancy_tollContextLayout_tollSchemeType(
                            v_adu.aduBody.tollContextOverview.unsigned_data, 
                            v_adu.aduBody.tollContextPartitionOverview.unsigned_data,
                            v_adu.aduBody.tollContextLayout.unsigned_data
                        ) == false) {
                            // StepN+3: fail
                            setverdict(fail);
                            t_runningDuration.stop;
                            break; // Exit from alt statement
                        }
                        t_ac.start; // Prepare for next message
                        v_tollContext := v_adu.aduHeader.tollContext;
                        repeat;
                    }
                    [] t_runningDuration.timeout {
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TCL_BE_BV_01

            /**
             * @desc    TC_TCL_BE_BV_02: Verify that one toll context shall have one or more toll context partition layout descriptions, one per defined toll context partition
             * @remark  [17575-3:2016], Clause 8.5.4.1 General rules
             * @see     [17575-3:2016], Table 16 — Data type TollContextPartitionLayout (informative)
             */
            testcase TC_TCL_BE_BV_02() runs on EutComp system TestAdapter {
                var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                var boolean v_result;
                
                // Test control
                if (PICS_SECURED_MODE) {
                    log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                    setverdict(inconc);
                    stop;
                }
                
                // Preamble
                f_contextData_Preambule();
                // Back End is initialized and can send Context Data
                // Preamble done
    
                // Test body start
                // Step 1: Trigger several ISO17575-3ADU messages
                f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                // Step2
                t_ac.start;
                alt {
                    [] a_pco_recv_iso17575_3Adu(
                        mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                            -,
                            {
                                mw_tollContextPartitionLayout(
                                    -,
                                    mw_layout_sectionPricingLayout
                                )
                            }
                        ),
                        v_adu,
                        v_result
                    ) { // Step3
                        // Stop timer
                        t_ac.stop;
                        // Step4
                        if (f_check_compliancy_tollContextOverview_tollContextPartitionLayout(
                            v_adu.aduBody.tollContextOverview.unsigned_data, 
                            v_adu.aduBody.tollContextLayout.unsigned_data
                        ) == false) {
                            setverdict(fail);
                        } else {
                            setverdict(pass);
                        }
                    }
                } // End of alt statement
                // Test body done

                // Postamble
                f_contextData_Postambule();
            } // End of TC TC_TCL_BE_BV_02

            /**
             * @desc    Toll Context Layout test purposes for Section pricing scheme
             * @see     B.11.1.1. Toll Context Layout test purposes for Section pricing scheme
             */
            group Toll_Context_Layout_Section_Pricing {
                
                /**
                 * @desc    TP_TCL_S_BE_BV_01: Verify that Charge Object Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.2 Requirements for section based layout
                 * @see     [17575-3:2016], Table 17 — Data type SectionLayout (informative)
                 */
                testcase TP_TCL_S_BE_BV_01() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_sectionPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // Step3
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_sectionPricingLayout_chargeObjectId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TP_TCL_S_BE_BV_01
    
                /**
                 * @desc    TP_TCL_S_BE_BV_02: Verify that Point Identifier is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.2 Requirements for section based layout
                 * @see     [17575-3:2016], Table 17 — Data type SectionLayout (informative)
                 */
                testcase TP_TCL_S_BE_BV_02() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_sectionPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // Step3
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_sectionPricingLayout_pointId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TP_TCL_S_BE_BV_02
    
                /**
                 * @desc    TP_TCL_S_BE_BV_03: Verify the Link Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.2.3 Data type Link
                 */
                testcase TP_TCL_S_BE_BV_03() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_sectionPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // Step3
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_sectionPricingLayout_linkId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TP_TCL_S_BE_BV_03
    
                /**
                 * @desc    TP_TCL_S_BE_BV_06: Verify that Point identified by Point Identifier in Link has been defined in Network Points
                 * @remark  [17575-3:2016], Clause 8.5.4.2.3 Data type Link
                 */
                testcase TP_TCL_S_BE_BV_06() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_sectionPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // Step3
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_sectionPricingLayout_link_pointID_networkPoints(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TP_TCL_S_BE_BV_06
    
                /**
                 * @desc    TP_TCL_S_BE_BV_08: Verify that Point identified by Point Identifier in Liability Rules has been defined in Network Points
                 * @remark  [17575-3:2016], Clause 8.5.4.2.4 Data type LiabilityRules
                 * @see     [17575-3:2016], Table 18 — Use of the data elements in data type LiabilityRules
                 */
                testcase TP_TCL_S_BE_BV_08() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_sectionPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // Step3
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_sectionPricingLayout_liabilityRules_pointID_networkPoints(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TP_TCL_S_BE_BV_08
    
                /**
                 * @desc    TP_TCL_S_BE_BV_10: Verify that Point identified by Point Identifier in Supporting Information has been defined in Network Points
                 * @remark  [17575-3:2016], Clause 8.5.4.2.5 Data type SupportingPoints
                 */
                testcase TP_TCL_S_BE_BV_10() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_sectionPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // Step3
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_sectionPricingLayout_supportingPoint_pointID_networkPoints(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done

                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TP_TCL_S_BE_BV_10
 
                /**
                 * @desc    TP_TCL_S_BE_BV_11: Verify that Applicable Time Classes for Section Layout are present in Time Class Definition
                 * @remark  [17575-3:2016], Clause 8.5.4.2.2 Data element sectionLayout/Data type SectionLayout
                 * @see     [17575-3:2016], Table 17 — Data type SectionLayout (informative)
                 */
                testcase TP_TCL_S_BE_BV_11() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done

                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_sectionPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // Step3
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_sectionPricingLayout_timeClassId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done

                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TP_TCL_S_BE_BV_11

            } // End of group Toll_Context_Layout_Section_Pricing

            /**
             * @desc    Toll Context Layout test purposes for Area pricing scheme
             * @see     B.11.1.2. Toll Context Layout test purposes for Area pricing scheme
             */
            group Toll_Context_Layout_Area_Pricing {
                /**
                 * @desc    TC_TCL_A_BE_BV_01: Verify that Area Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                testcase TC_TCL_A_BE_BV_01() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_areaPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_areaPricingLayout_areaId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_A_BE_BV_01

                /**
                 * @desc    TC_TCL_A_BE_BV_02: Verify that Charge Object Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                testcase TC_TCL_A_BE_BV_02() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Section pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_areaPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s)
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_areaPricingLayout_chargeObjectId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_A_BE_BV_02

                /**
                 * @desc    TC_TCL_A_BE_BV_03: Verify that Point Identifier is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                testcase TC_TCL_A_BE_BV_03() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_areaPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_areaPricingLayout_pointId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_A_BE_BV_03

                /**
                 * @desc    TC_TCL_A_BE_BV_04: Verify that Link Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                testcase TC_TCL_A_BE_BV_04() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_areaPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_areaPricingLayout_linkId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done

                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_A_BE_BV_04

                /**
                 * @desc    TC_TCL_A_BE_BV_06: Verify that Point is identified by Point Identifier within Link
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                testcase TC_TCL_A_BE_BV_06() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_areaPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_areaPricingLayout_Link_pointID_usedPoints(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_A_BE_BV_06

                /**
                 * @desc    TC_TCL_A_BE_BV_08: Verify that Point identified by Point Identifier in Supporting Information has been defined in Network Points
                 * @remark  [17575-3:2016], Clause 8.5.4.3 Requirements for area based layouts
                 * @see     [17575-3:2016], Table 19 — Data type AreaLayout (informative)
                 */
                testcase TC_TCL_A_BE_BV_08() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Area pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_areaPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_areaPricingLayout_SupportingPoint_pointID_networkPoints(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done

                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_A_BE_BV_08

            } // End of group Toll_Context_Layout_Area_Pricing

            /**
             * @desc    Toll Context Layout test purposes for Cordon pricing scheme
             * @see     B.11.1.3. Toll Context Layout test purposes for Cordon pricing scheme
             */
            group Toll_Context_Layout_Cordon_Pricing {
                /**
                 * @desc    TC_TCL_C_BE_BV_01: Verify that Cordon Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.4.1 Data element cordonLayout
                 * @see     [17575-3:2016], Table 20 — Data type CordonLayout (informative)
                 */
                testcase TC_TCL_C_BE_BV_01() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Cordon pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_cordonPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_cordonPricingLayout_cordonId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_C_BE_BV_01

                /**
                 * @desc    TC_TCL_C_BE_BV_02: Verify that Applicable Time Classes for Cordon Layout are present in Time Class Definition (Cordon Entry Locations)
                 * @remark  [17575-3:2016], Clause 8.5.4.4.2 Data type CordonBorderPolygon
                 */
                testcase TC_TCL_C_BE_BV_02() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    var TimeClassDefinition.timeClasses v_timeClasses := null;
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Cordon pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_cordonPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s)
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (ispresent(v_adu.aduBody.timeClassDefinition)) {
                                v_timeClasses := v_adu.aduBody.timeClassDefinition.unsigned_data.timeClasses
                            }
                            if (f_check_uniqueness_tollContextLayout_cordonPricingLayout_cordonEntryLocation_applicableTimeClasses(v_adu.aduBody.tollContextLayout.unsigned_data, v_timeClasses) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_C_BE_BV_02

                /**
                 * @desc    TC_TCL_C_BE_BV_03: Verify that Applicable Time Classes for Cordon Layout are present in Time Class Definition (Cordon Exit Locations)
                 * @remark  [17575-3:2016], Clause 8.5.4.4.2 Data type CordonBorderPolygon
                 */
                testcase TC_TCL_C_BE_BV_03() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    var TimeClassDefinition.timeClasses v_timeClasses := null;
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Cordon pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_cordonPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (ispresent(v_adu.aduBody.timeClassDefinition)) {
                                v_timeClasses := v_adu.aduBody.timeClassDefinition.unsigned_data.timeClasses
                            }
                            if (f_check_uniqueness_tollContextLayout_cordonPricingLayout_cordonExitLocation_applicableTimeClasses(
                                v_adu.aduBody.tollContextLayout.unsigned_data, 
                                v_timeClasses
                            ) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_C_BE_BV_03

                /**
                 * @desc    TC_TCL_C_BE_BV_04: Verify the Cordon Segment Id is unique
                 * @remark  [17575-3:2016], Clause 8.5.4.4.2 Data type CordonBorderPolygon
                 */
                testcase TC_TCL_C_BE_BV_04() runs on EutComp system TestAdapter {
                    var Iso17575_3Adu v_adu := null; // Used to retrieve data elements list
                    timer t_runningDuration := PX_TEST_BODY_DURATION; // Used to repeat test body sequence during 30.0 seconds
                    var template (present) Provider v_tollContext := ?; // Used for tollContext/v_contextId matching uniqueness
                    var boolean v_result;
                    
                    // Test control
                    if (PICS_SECURED_MODE) {
                        log("*** " & testcasename() & ": not PICS_SECURED_MODE required for executing the TC ***");
                        setverdict(inconc);
                        stop;
                    }
                    
                    // Preamble
                    f_contextData_Preambule();
                    // Back End is initialized and can send Context Data. Cordon pricing scheme is used for the Toll Context
                    // Preamble done
        
                    // Test body start
                    // Step 1: Trigger several ISO17575-3ADU messages
                    f_userActions(cmdTrigger, raiseADUs); // Back End sends Context Data for each Toll Context
                    // StepN: Wait for ISO17575-3ADU message
                    t_runningDuration.start;
                    t_ac.start;
                    alt {
                        [] a_pco_recv_iso17575_3Adu(
                            mw_iso17575_3Adu_tollContextPartitionLayout_TollCharger(
                                -,
                                {
                                    mw_tollContextPartitionLayout(
                                        -,
                                        mw_layout_cordonPricingLayout
                                    )
                                }
                            ),
                            v_adu,
                            v_result
                        ) { // StepN+1: Verify structure of sent Iso17575-3Adu(s), taking presence and absence of optional data elements into account and verify allowed values of present data elements according to Table C.6 - : General Structure of Context Data
                            // Stop timer
                            t_ac.stop;
                            // StepN+3: We are sure there is at least one instance of ‘TollContextLayout’ attribute, check uniqueness now
                            if (f_check_uniqueness_tollContextLayout_cordonPricingLayout_cordonSegmentId(v_adu.aduBody.tollContextLayout.unsigned_data) == false) {
                                // StepN+3: fail
                                setverdict(fail);
                                t_runningDuration.stop;
                                break; // Exit from alt statement
                            }
                            t_ac.start; // Prepare for next message
                            v_tollContext := v_adu.aduHeader.tollContext;
                            repeat;
                        }
                        [] t_runningDuration.timeout {
                            setverdict(pass);
                        }
                    } // End of alt statement
                    // Test body done
    
                    // Postamble
                    f_contextData_Postambule();
                } // End of TC TC_TCL_C_BE_BV_04

            } // End of group Toll_Context_Layout_Cordon_Pricing

        } // End of group Valid_Behaviour

        /**
         * @desc    No BI test purposes are applicable for this TP group
         * @remark  0 TCs
         */
        group Invalid_Behaviour {
        } // End of group Invalid_Behaviour
    } // End of group Toll_Context_Layout
} // End of module ContextData_TCs